name: bpg/proxmox
resources:
    proxmox_virtual_environment_acl:
        subCategory: Virtual Environment
        description: Manages ACLs on the Proxmox cluster. ACLs are used to control access to resources in the Proxmox cluster. Each ACL consists of a path, a user, group or token, a role, and a flag to allow propagation of permissions.
        name: proxmox_virtual_environment_acl
        title: proxmox_virtual_environment_acl
        examples:
            - name: operations_automation_monitoring
              manifest: |-
                {
                  "path": "/vms/1234",
                  "propagate": true,
                  "role_id": "${proxmox_virtual_environment_role.operations_monitoring.role_id}",
                  "user_id": "${proxmox_virtual_environment_user.operations_automation.user_id}"
                }
              references:
                role_id: proxmox_virtual_environment_role.operations_monitoring.role_id
                user_id: proxmox_virtual_environment_user.operations_automation.user_id
              dependencies:
                proxmox_virtual_environment_role.operations_monitoring: |-
                    {
                      "privileges": [
                        "VM.Monitor"
                      ],
                      "role_id": "operations-monitoring"
                    }
                proxmox_virtual_environment_user.operations_automation: |-
                    {
                      "comment": "Managed by Terraform",
                      "password": "a-strong-password",
                      "user_id": "operations-automation@pve"
                    }
        argumentDocs:
            group_id: (String) The group the ACL should apply to (mutually exclusive with token_id and user_id)
            id: (String) The unique identifier of this resource.
            path: (String) Access control path
            propagate: (Boolean) Allow to propagate (inherit) permissions.
            role_id: (String) The role to apply
            token_id: (String) The token the ACL should apply to (mutually exclusive with group_id and user_id)
            user_id: (String) The user the ACL should apply to (mutually exclusive with group_id and token_id)
        importStatements:
            - |-
              #!/usr/bin/env sh
              # ACL can be imported using its unique identifier, e.g.: {path}?{group|user@realm|user@realm!token}?{role}
              terraform import proxmox_virtual_environment_acl.operations_automation_monitoring /?monitor@pve?operations-monitoring
    proxmox_virtual_environment_acme_account:
        subCategory: Virtual Environment
        description: Manages an ACME account in a Proxmox VE cluster. ~> This resource requires root@pam authentication.
        name: proxmox_virtual_environment_acme_account
        title: proxmox_virtual_environment_acme_account
        examples:
            - name: example
              manifest: |-
                {
                  "contact": "example@email.com",
                  "directory": "https://acme-staging-v02.api.letsencrypt.org/directory",
                  "name": "example",
                  "tos": "https://letsencrypt.org/documents/LE-SA-v1.3-September-21-2022.pdf"
                }
        argumentDocs:
            contact: (String) The contact email addresses.
            created_at: (String) The timestamp of the ACME account creation.
            directory: (String) The URL of the ACME CA directory endpoint.
            eab_hmac_key: (String) The HMAC key for External Account Binding.
            eab_kid: (String) The Key Identifier for External Account Binding.
            location: (String) The location of the ACME account.
            name: (String) The ACME account config file name.
            tos: (String) The URL of CA TermsOfService - setting this indicates agreement.
        importStatements:
            - |-
              #!/usr/bin/env sh
              # ACME accounts can be imported using their name, e.g.:
              terraform import proxmox_virtual_environment_acme_account.example example
    proxmox_virtual_environment_acme_dns_plugin:
        subCategory: Virtual Environment
        description: Manages an ACME plugin in a Proxmox VE cluster.
        name: proxmox_virtual_environment_acme_dns_plugin
        title: proxmox_virtual_environment_acme_dns_plugin
        examples:
            - name: example
              manifest: |-
                {
                  "api": "aws",
                  "data": {
                    "AWS_ACCESS_KEY_ID": "EXAMPLE",
                    "AWS_SECRET_ACCESS_KEY": "EXAMPLE"
                  },
                  "plugin": "test"
                }
        argumentDocs:
            api: (String) API plugin name.
            data: (Map of String) DNS plugin data.
            digest: (String) SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
            disable: (Boolean) Flag to disable the config.
            plugin: (String) ACME Plugin ID name.
            validation_delay: (Number) Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
        importStatements:
            - |-
              #!/usr/bin/env sh
              # ACME accounts can be imported using their name, e.g.:
              terraform import proxmox_virtual_environment_acme_dns_plugin.example test
    proxmox_virtual_environment_apt_repository:
        subCategory: Virtual Environment
        description: Manages an APT repository of a Proxmox VE node.
        name: proxmox_virtual_environment_apt_repository
        title: proxmox_virtual_environment_apt_repository
        examples:
            - name: example
              manifest: |-
                {
                  "enabled": true,
                  "file_path": "/etc/apt/sources.list",
                  "index": 0,
                  "node": "pve"
                }
        argumentDocs:
            comment: (String) The associated comment.
            components: (List of String) The list of components.
            enabled: (Boolean) Indicates the activation status.
            file_path: (String) The absolute path of the source list file that contains this repository.
            file_type: (String) The format of the defining source list file.
            id: (String) The unique identifier of this APT repository resource.
            index: (Number) The index within the defining source list file.
            node: (String) The name of the target Proxmox VE node.
            package_types: (List of String) The list of package types.
            suites: (List of String) The list of package distributions.
            uris: (List of String) The list of repository URIs.
        importStatements:
            - |-
              #!/usr/bin/env sh
              # An APT repository can be imported using a comma-separated list consisting of the name of the Proxmox VE node,
              # the absolute source list file path, and the index in the exact same order, e.g.:
              terraform import proxmox_virtual_environment_apt_repository.example pve,/etc/apt/sources.list,0
    proxmox_virtual_environment_apt_standard_repository:
        subCategory: Virtual Environment
        description: Manages an APT standard repository of a Proxmox VE node.
        name: proxmox_virtual_environment_apt_standard_repository
        title: proxmox_virtual_environment_apt_standard_repository
        examples:
            - name: example
              manifest: |-
                {
                  "handle": "no-subscription",
                  "node": "pve"
                }
              dependencies:
                proxmox_virtual_environment_apt_repository.example: |-
                    {
                      "enabled": true,
                      "file_path": "${proxmox_virtual_environment_apt_standard_repository.example.file_path}",
                      "index": "${proxmox_virtual_environment_apt_standard_repository.example.index}",
                      "node": "${proxmox_virtual_environment_apt_standard_repository.example.node}"
                    }
        argumentDocs:
            description: (String) The description of the APT standard repository.
            file_path: (String) The absolute path of the source list file that contains this standard repository.
            handle: (String) The handle of the APT standard repository. Must be ceph-quincy-enterprise | ceph-quincy-no-subscription | ceph-quincy-test | ceph-reef-enterprise | ceph-reef-no-subscription | ceph-reef-test | ceph-squid-enterprise | ceph-squid-no-subscription | ceph-squid-test | enterprise | no-subscription | test.
            id: (String) The unique identifier of this APT standard repository resource.
            index: (Number) The index within the defining source list file.
            name: (String) The name of the APT standard repository.
            node: (String) The name of the target Proxmox VE node.
            status: (Number) Indicates the activation status.
        importStatements:
            - |-
              #!/usr/bin/env sh
              # An APT standard repository can be imported using a comma-separated list consisting of the name of the Proxmox VE node,
              # and the standard repository handle in the exact same order, e.g.:
              terraform import proxmox_virtual_environment_apt_standard_repository.example pve,no-subscription
    proxmox_virtual_environment_certificate:
        subCategory: Virtual Environment
        description: '|  Manages the custom SSL/TLS certificate for a specific node.'
        name: proxmox_virtual_environment_certificate
        title: proxmox_virtual_environment_certificate
        examples:
            - name: example
              manifest: |-
                {
                  "certificate": "${tls_self_signed_cert.proxmox_virtual_environment_certificate.cert_pem}",
                  "node_name": "first-node",
                  "private_key": "${tls_private_key.proxmox_virtual_environment_certificate.private_key_pem}"
                }
              references:
                certificate: tls_self_signed_cert.proxmox_virtual_environment_certificate.cert_pem
                private_key: tls_private_key.proxmox_virtual_environment_certificate.private_key_pem
              dependencies:
                tls_private_key.proxmox_virtual_environment_certificate: |-
                    {
                      "algorithm": "RSA",
                      "rsa_bits": 2048
                    }
                tls_self_signed_cert.proxmox_virtual_environment_certificate: |-
                    {
                      "allowed_uses": [
                        "key_encipherment",
                        "digital_signature",
                        "server_auth"
                      ],
                      "key_algorithm": "${tls_private_key.proxmox_virtual_environment_certificate.algorithm}",
                      "private_key_pem": "${tls_private_key.proxmox_virtual_environment_certificate.private_key_pem}",
                      "subject": [
                        {
                          "common_name": "example.com",
                          "organization": "Terraform Provider for Proxmox"
                        }
                      ],
                      "validity_period_hours": 8760
                    }
        argumentDocs:
            certificate: '- (Required) The PEM encoded certificate.'
            certificate_chain: '- (Optional) The PEM encoded certificate chain.'
            expiration_date: '- The expiration date (RFC 3339).'
            file_name: '- The file name.'
            issuer: '- The issuer.'
            node_name: '- (Required) A node name.'
            private_key: '- (Required) The PEM encoded private key.'
            public_key_size: '- The public key size.'
            public_key_type: '- The public key type.'
            ssl_fingerprint: '- The SSL fingerprint.'
            start_date: '- The start date (RFC 3339).'
            subject: '- The subject.'
            subject_alternative_names: '- The subject alternative names.'
        importStatements: []
    proxmox_virtual_environment_cluster_firewall:
        subCategory: Virtual Environment
        description: '|  Manages firewall options on the cluster level.'
        name: proxmox_virtual_environment_cluster_firewall
        title: proxmox_virtual_environment_cluster_firewall
        examples:
            - name: example
              manifest: |-
                {
                  "ebtables": false,
                  "enabled": false,
                  "forward_policy": "ACCEPT",
                  "input_policy": "DROP",
                  "log_ratelimit": [
                    {
                      "burst": 10,
                      "enabled": false,
                      "rate": "5/second"
                    }
                  ],
                  "output_policy": "ACCEPT"
                }
        argumentDocs:
            burst: |-
                - (Optional) Initial burst of packages which will always get
                logged before the rate is applied (defaults to 5).
            ebtables: '- (Optional) Enable ebtables rules cluster wide.'
            enabled: '- (Optional) Enable or disable the firewall cluster wide.'
            forward_policy: '- (Optional) The default forward policy (ACCEPT, DROP).'
            input_policy: '- (Optional) The default input policy (ACCEPT, DROP, REJECT).'
            log_ratelimit: '- (Optional) The log rate limit.'
            output_policy: '- (Optional) The default output policy (ACCEPT, DROP, REJECT).'
            rate: |-
                - (Optional) Frequency with which the burst bucket gets refilled
                (defaults to 1/second).
        importStatements: []
    proxmox_virtual_environment_cluster_firewall_security_group:
        subCategory: Virtual Environment
        description: '|  A security group is a collection of rules, defined at cluster level, which can be used in all VMs'' rules. For example, you can define a group named webserver with rules to open the http and https ports.'
        name: proxmox_virtual_environment_cluster_firewall_security_group
        title: proxmox_virtual_environment_cluster_firewall_security_group
        examples:
            - name: webserver
              manifest: |-
                {
                  "comment": "Managed by Terraform",
                  "name": "webserver",
                  "rule": [
                    {
                      "action": "ACCEPT",
                      "comment": "Allow HTTP",
                      "dest": "192.168.1.5",
                      "dport": "80",
                      "log": "info",
                      "proto": "tcp",
                      "type": "in"
                    },
                    {
                      "action": "ACCEPT",
                      "comment": "Allow HTTPS",
                      "dest": "192.168.1.5",
                      "dport": "443",
                      "log": "info",
                      "proto": "tcp",
                      "type": "in"
                    }
                  ]
                }
        argumentDocs:
            action: '- (Required) Rule action (ACCEPT, DROP, REJECT).'
            comment: '- (Optional) Security group comment.'
            dest: |-
                - (Optional) Restrict packet destination address. This can refer to
                a single IP address, an IP set ('+ipsetname') or an IP alias
                definition. You can also specify an address range like
                20.34.101.207-201.3.9.99, or a list of IP addresses and networks
                (entries are separated by comma). Please do not mix IPv4 and IPv6
                addresses inside such lists.
            dport: |-
                - (Optional) Restrict TCP/UDP destination port. You can use
                service names or simple numbers (0-65535), as defined in '/etc/
                services'. Port ranges can be specified with '\d+:\d+', for example
                80:85, and you can use comma separated list to match several ports or
                ranges.
            enabled: '- (Optional) Enable this rule. Defaults to true.'
            iface: |-
                - (Optional) Network interface name. You have to use network
                configuration key names for VMs and containers ('net\d+'). Host related
                rules can use arbitrary strings.
            log: |-
                - (Optional) Log level for this rule (emerg, alert, crit,
                err, warning, notice, info, debug, nolog).
            macro: |-
                - (Optional) Macro name. Use predefined standard macro
                from https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_firewall_macro_definitions
            name: '- (Required) Security group name.'
            pos: '- Position of the rule in the list.'
            proto: |-
                - (Optional) Restrict packet protocol. You can use protocol names
                as defined in '/etc/protocols'.
            rule: '- (Optional) Firewall rule block (multiple blocks supported).'
            source: |-
                - (Optional) Restrict packet source address. This can refer
                to a single IP address, an IP set ('+ipsetname') or an IP alias
                definition. You can also specify an address range like
                20.34.101.207-201.3.9.99, or a list of IP addresses and networks (
                entries are separated by comma). Please do not mix IPv4 and IPv6
                addresses inside such lists.
            sport: |-
                - (Optional) Restrict TCP/UDP source port. You can use
                service names or simple numbers (0-65535), as defined in '/etc/
                services'. Port ranges can be specified with '\d+:\d+', for example
                80:85, and you can use comma separated list to match several ports or
                ranges.
            type: '- (Required) Rule type (in, out, forward).'
        importStatements: []
    proxmox_virtual_environment_cluster_options:
        subCategory: Virtual Environment
        description: Manages Proxmox VE Cluster Datacenter options.
        name: proxmox_virtual_environment_cluster_options
        title: proxmox_virtual_environment_cluster_options
        examples:
            - name: options
              manifest: |-
                {
                  "bandwidth_limit_default": 666666,
                  "bandwidth_limit_migration": 555555,
                  "email_from": "ged@gont.earthsea",
                  "keyboard": "pl",
                  "language": "en",
                  "max_workers": 5,
                  "migration_cidr": "10.0.0.0/8",
                  "migration_type": "secure",
                  "next_id": {
                    "lower": 100,
                    "upper": 999999999
                  },
                  "notify": {
                    "ha_fencing_mode": "never",
                    "ha_fencing_target": "default-matcher",
                    "package_replication": "always",
                    "package_replication_target": "default-matcher",
                    "package_updates": "always",
                    "package_updates_target": "default-matcher"
                  }
                }
        argumentDocs:
            bandwidth_limit_clone: (Number) Clone I/O bandwidth limit in KiB/s.
            bandwidth_limit_default: (Number) Default I/O bandwidth limit in KiB/s.
            bandwidth_limit_migration: (Number) Migration I/O bandwidth limit in KiB/s.
            bandwidth_limit_move: (Number) Move I/O bandwidth limit in KiB/s.
            bandwidth_limit_restore: (Number) Restore I/O bandwidth limit in KiB/s.
            console: (String) Select the default Console viewer. Must be applet | vv| html5 | xtermjs. You can either use the builtin java applet (VNC; deprecated and maps to html5), an external virt-viewer compatible application (SPICE), an HTML5 based vnc viewer (noVNC), or an HTML5 based console client (xtermjs). If the selected viewer is not available (e.g. SPICE not activated for the VM), the fallback is noVNC.
            crs_ha: (String) Cluster resource scheduling setting for HA. Must be static | basic (default is basic).
            crs_ha_rebalance_on_start: (Boolean) Cluster resource scheduling setting for HA rebalance on start.
            description: (String) Datacenter description. Shown in the web-interface datacenter notes panel. This is saved as comment inside the configuration file.
            email_from: (String) email address to send notification from (default is root@$hostname).
            ha_fencing_mode: (String) Cluster-wide notification settings for the HA fencing mode. Must be always | never.
            ha_fencing_target: (String) Cluster-wide notification settings for the HA fencing target.
            ha_shutdown_policy: (String) Cluster wide HA shutdown policy (). Must be freeze | failover | migrate | conditional (default is conditional).
            http_proxy: '(String) Specify external http proxy which is used for downloads (example: http://username:password@host:port/).'
            id: (String) The unique identifier of this resource.
            keyboard: (String) Default keyboard layout for vnc server. Must be de | de-ch | da | en-gb | en-us | es | fi | fr | fr-be | fr-ca | fr-ch | hu | is | it | ja | lt | mk | nl | no | pl | pt | pt-br | sv | sl | tr.
            language: (String) Default GUI language. Must be ca | da | de | en | es | eu | fa | fr | he | it | ja | nb | nn | pl | pt_BR | ru | sl | sv | tr | zh_CN | zh_TW.
            lower: (Number) The minimum number for the next free VM ID. Must be higher or equal to 100
            mac_prefix: (String) Prefix for autogenerated MAC addresses.
            max_workers: (Number) Defines how many workers (per node) are maximal started on actions like 'stopall VMs' or task from the ha-manager.
            migration_cidr: (String) Cluster wide migration network CIDR.
            migration_type: (String) Cluster wide migration type. Must be secure | insecure (default is secure).
            next_id: (Attributes) The ranges for the next free VM ID auto-selection pool. (see below for nested schema)
            notify: (Attributes) Cluster-wide notification settings. (see below for nested schema)
            package_updates: (String) Cluster-wide notification settings for package updates. Must be auto | always | never.
            package_updates_target: (String) Cluster-wide notification settings for the package updates target.
            replication: (String) Cluster-wide notification settings for replication. Must be always | never.
            replication_target: (String) Cluster-wide notification settings for the replication target.
            upper: (Number) The maximum number for the next free VM ID. Must be less or equal to 999999999
        importStatements:
            - |-
              #!/usr/bin/env sh
              # Cluster options are global and can be imported using e.g.:
              terraform import proxmox_virtual_environment_cluster_options.options cluster
    proxmox_virtual_environment_container:
        subCategory: Virtual Environment
        description: '|  Manages a container.'
        name: proxmox_virtual_environment_container
        title: proxmox_virtual_environment_container
        examples:
            - name: ubuntu_container
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "disk": [
                    {
                      "datastore_id": "local-lvm",
                      "size": 4
                    }
                  ],
                  "initialization": [
                    {
                      "hostname": "terraform-provider-proxmox-ubuntu-container",
                      "ip_config": [
                        {
                          "ipv4": [
                            {
                              "address": "dhcp"
                            }
                          ]
                        }
                      ],
                      "user_account": [
                        {
                          "keys": [
                            "${trimspace(tls_private_key.ubuntu_container_key.public_key_openssh)}"
                          ],
                          "password": "${random_password.ubuntu_container_password.result}"
                        }
                      ]
                    }
                  ],
                  "mount_point": [
                    {
                      "path": "/mnt/shared",
                      "volume": "/mnt/bindmounts/shared"
                    },
                    {
                      "path": "/mnt/volume",
                      "size": "10G",
                      "volume": "local-lvm"
                    }
                  ],
                  "network_interface": [
                    {
                      "name": "veth0"
                    }
                  ],
                  "node_name": "first-node",
                  "operating_system": [
                    {
                      "template_file_id": "${proxmox_virtual_environment_download_file.latest_ubuntu_22_jammy_lxc_img.id}",
                      "type": "ubuntu"
                    }
                  ],
                  "startup": [
                    {
                      "down_delay": "60",
                      "order": "3",
                      "up_delay": "60"
                    }
                  ],
                  "vm_id": 1234
                }
              references:
                initialization.user_account.password: random_password.ubuntu_container_password.result
                operating_system.template_file_id: proxmox_virtual_environment_download_file.latest_ubuntu_22_jammy_lxc_img.id
              dependencies:
                proxmox_virtual_environment_download_file.latest_ubuntu_22_jammy_lxc_img: |-
                    {
                      "content_type": "vztmpl",
                      "datastore_id": "local",
                      "node_name": "first-node",
                      "url": "http://download.proxmox.com/images/system/ubuntu-20.04-standard_20.04-1_amd64.tar.gz"
                    }
                random_password.ubuntu_container_password: |-
                    {
                      "length": 16,
                      "override_special": "_%@",
                      "special": true
                    }
                tls_private_key.ubuntu_container_key: |-
                    {
                      "algorithm": "RSA",
                      "rsa_bits": 2048
                    }
        argumentDocs:
            acl: (Optional) Explicitly enable or disable ACL support.
            address: '- (Optional) The IPv4 address (use dhcp for auto-discovery).'
            alpine: '- Alpine.'
            amd64: '- x86 (64 bit).'
            architecture: '- (Optional) The CPU architecture (defaults to amd64).'
            archlinux: '- Arch Linux.'
            arm64: '- ARM (64-bit).'
            armhf: '- ARM (32 bit).'
            backup: |-
                (Optional) Whether to include the mount point in backups (only
                used for volume mount points, defaults to false).
            bridge: |-
                - (Optional) The name of the network bridge (defaults
                to vmbr0).
            centos: '- CentOS.'
            clone: '- (Optional) The cloning configuration.'
            console: '- (Optional) The console configuration.'
            cores: '- (Optional) The number of CPU cores (defaults to 1).'
            cpu: '- (Optional) The CPU configuration.'
            datastore_id: '- (Optional) The identifier for the target datastore.'
            debian: '- Debian.'
            dedicated: |-
                - (Optional) The dedicated memory in megabytes (defaults
                to 512).
            deny_write: '- (Optional) Deny the container to write to the device (defaults to false).'
            description: '- (Optional) The description.'
            device_passthrough: '- (Optional) Device to pass through to the container (multiple blocks supported).'
            devuan: '- Devuan.'
            disk: '- (Optional) The disk configuration.'
            dns: '- (Optional) The DNS configuration.'
            domain: '- (Optional) The DNS search domain.'
            down_delay: |-
                - (Optional) A non-negative number defining the delay in
                seconds before the next container is shut down.
            enabled: |-
                - (Optional) Whether to enable the console device (defaults
                to true).
            features: '- (Optional) The container feature flags. Changing flags (except nesting) is only allowed for root@pam authenticated user.'
            fedora: '- Fedora.'
            firewall: |-
                - (Optional) Whether this interface's firewall rules should be
                used (defaults to false).
            fuse: '- (Optional) Whether the container supports FUSE mounts (defaults to false)'
            gateway: |-
                - (Optional) The IPv4 gateway (must be omitted
                when dhcp is used as the address).
            gentoo: '- Gentoo.'
            gid: '- (Optional) Group ID to be assigned to the device node.'
            hook_script_file_id: '- (Optional) The identifier for a file containing a hook script (needs to be executable, e.g. by using the proxmox_virtual_environment_file.file_mode attribute).'
            hostname: '- (Optional) The hostname.'
            i386: '- x86 (32 bit).'
            initialization: '- (Optional) The initialization configuration.'
            ip_config: |-
                - (Optional) The IP configuration (one block per network
                device).
            ipv4: '- (Optional) The IPv4 configuration.'
            ipv6: '- (Optional) The IPv4 configuration.'
            keyctl: '- (Optional) Whether the container supports keyctl() system call (defaults to false)'
            keys: '- (Optional) The SSH keys for the root account.'
            mac_address: '- (Optional) The MAC address.'
            memory: '- (Optional) The memory configuration.'
            mode: |-
                - (Optional) Access mode to be set on the device node. Must be a
                4-digit octal number.
            mount: '- (Optional) List of allowed mount types (cifs or nfs)'
            mount_options: (Optional) List of extra mount options.
            mount_point: ""
            mtu: |-
                - (Optional) Maximum transfer unit of the interface. Cannot be
                larger than the bridge's MTU.
            name: '- (Required) The network interface name.'
            nesting: '- (Optional) Whether the container is nested (defaults to false)'
            network_interface: |-
                - (Optional) A network interface (multiple blocks
                supported).
            nixos: '- NixOS.'
            node_name: |-
                - (Optional) The name of the source node (leave blank, if
                equal to the node_name argument).
            opensuse: '- openSUSE.'
            operating_system: '- (Required) The Operating System configuration.'
            order: |-
                - (Required) A non-negative number defining the general startup
                order.
            password: '- (Optional) The password for the root account.'
            path: |-
                (Required) Path to the mount point as seen from inside the
                container.
            pool_id: '- (Optional) The identifier for a pool to assign the container to.'
            protection: '- (Optional) Whether to set the protection flag of the container (defaults to false). This will prevent the container itself and its disk for remove/update operations.'
            quota: |-
                (Optional) Enable user quotas inside the container (not supported
                with ZFS subvolumes).
            rate_limit: '- (Optional) The rate limit in megabytes per second.'
            read_only: (Optional) Read-only mount point.
            replicate: (Optional) Will include this volume to a storage replica job.
            server: |-
                - (Optional) The DNS server. The server attribute is
                deprecated and will be removed in a future release. Please use
                the servers attribute instead.
            servers: '- (Optional) The list of DNS servers.'
            shared: |-
                (Optional) Mark this non-volume mount point as available on all
                nodes.
            shell: '- Shell.'
            size: |-
                - (Optional) The size of the root filesystem in gigabytes (defaults
                to 4). When set to 0 a directory or zfs/btrfs subvolume will be created.
                Requires datastore_id to be set.
            start_on_boot: |-
                - (Optional) Automatically start container when the host
                system boots (defaults to true).
            started: '- (Optional) Whether to start the container (defaults to true).'
            startup: '- (Optional) Defines startup and shutdown behavior of the container.'
            swap: '- (Optional) The swap size in megabytes (defaults to 0).'
            tags: |-
                - (Optional) A list of tags the container tags. This is only meta
                information (defaults to []). Note: Proxmox always sorts the container tags and set them to lowercase.
                If tag contains capital letters, then Proxmox will always report a
                difference on the resource. You may use the ignore_changes lifecycle
                meta-argument to ignore changes to this attribute.
            template: '- (Optional) Whether to create a template (defaults to false).'
            template_file_id: |-
                - (Required) The identifier for an OS template file.
                The ID format is <datastore_id>:<content_type>/<file_name>, for example local:iso/jammy-server-cloudimg-amd64.tar.gz.
                Can be also taken from proxmox_virtual_environment_download_file resource, or from the output of pvesm list <storage>.
            timeout_clone: '- (Optional) Timeout for cloning a container in seconds (defaults to 1800).'
            timeout_create: '- (Optional) Timeout for creating a container in seconds (defaults to 1800).'
            timeout_delete: '- (Optional) Timeout for deleting a container in seconds (defaults to 60).'
            timeout_update: '- (Optional) Timeout for updating a container in seconds (defaults to 1800).'
            tty: '- TTY.'
            tty_count: '- (Optional) The number of available TTY (defaults to 2).'
            type: '- (Optional) The console mode (defaults to tty).'
            ubuntu: '- Ubuntu.'
            uid: '- (Optional) User ID to be assigned to the device node.'
            units: '- (Optional) The CPU units (defaults to 1024).'
            unmanaged: '- Unmanaged.'
            unprivileged: '- (Optional) Whether the container runs as unprivileged on the host (defaults to false).'
            up_delay: |-
                - (Optional) A non-negative number defining the delay in
                seconds before the next container is started.
            user_account: '- (Optional) The user account configuration.'
            vlan_id: '- (Optional) The VLAN identifier.'
            vm_id: '- (Required) The identifier for the source container.'
            volume: |-
                (Required) Volume, device or directory to mount into the
                container.
        importStatements: []
    proxmox_virtual_environment_dns:
        subCategory: Virtual Environment
        description: '|  Manages the DNS configuration for a specific node.'
        name: proxmox_virtual_environment_dns
        title: proxmox_virtual_environment_dns
        examples:
            - name: first_node_dns_configuration
              manifest: |-
                {
                  "domain": "${data.proxmox_virtual_environment_dns.first_node_dns_configuration.domain}",
                  "node_name": "${data.proxmox_virtual_environment_dns.first_node_dns_configuration.node_name}",
                  "servers": [
                    "1.1.1.1",
                    "1.0.0.1"
                  ]
                }
              references:
                domain: data.proxmox_virtual_environment_dns.first_node_dns_configuration.domain
                node_name: data.proxmox_virtual_environment_dns.first_node_dns_configuration.node_name
        argumentDocs:
            domain: '- (Required) The DNS search domain.'
            node_name: '- (Required) A node name.'
            servers: '- (Optional) The DNS servers.'
        importStatements: []
    proxmox_virtual_environment_download_file:
        subCategory: Virtual Environment
        description: Manages files upload using PVE download-url API. It can be fully compatible and faster replacement for image files created using proxmox_virtual_environment_file. Supports images for VMs (ISO and disk images) and LXC (CT Templates).
        name: proxmox_virtual_environment_download_file
        title: proxmox_virtual_environment_download_file
        examples:
            - name: release_20231228_debian_12_bookworm_qcow2_img
              manifest: |-
                {
                  "checksum": "d2fbcf11fb28795842e91364d8c7b69f1870db09ff299eb94e4fbbfa510eb78d141e74c1f4bf6dfa0b7e33d0c3b66e6751886feadb4e9916f778bab1776bdf1b",
                  "checksum_algorithm": "sha512",
                  "content_type": "iso",
                  "datastore_id": "local",
                  "file_name": "debian-12-generic-amd64-20231228-1609.img",
                  "node_name": "pve",
                  "url": "https://cloud.debian.org/images/cloud/bookworm/20231228-1609/debian-12-generic-amd64-20231228-1609.qcow2"
                }
            - name: release_20231228_debian_12_bookworm_qcow2
              manifest: |-
                {
                  "checksum": "d2fbcf11fb28795842e91364d8c7b69f1870db09ff299eb94e4fbbfa510eb78d141e74c1f4bf6dfa0b7e33d0c3b66e6751886feadb4e9916f778bab1776bdf1b",
                  "checksum_algorithm": "sha512",
                  "content_type": "import",
                  "datastore_id": "local",
                  "file_name": "debian-12-generic-amd64-20231228-1609.qcow2",
                  "node_name": "pve",
                  "url": "https://cloud.debian.org/images/cloud/bookworm/20231228-1609/debian-12-generic-amd64-20231228-1609.qcow2"
                }
            - name: latest_debian_12_bookworm_qcow2_img
              manifest: |-
                {
                  "content_type": "iso",
                  "datastore_id": "local",
                  "file_name": "debian-12-generic-amd64.qcow2.img",
                  "node_name": "pve",
                  "url": "https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2"
                }
            - name: latest_debian_12_bookworm_qcow2
              manifest: |-
                {
                  "content_type": "import",
                  "datastore_id": "local",
                  "file_name": "debian-12-generic-amd64.qcow2",
                  "node_name": "pve",
                  "url": "https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2"
                }
            - name: latest_ubuntu_22_jammy_qcow2_img
              manifest: |-
                {
                  "content_type": "iso",
                  "datastore_id": "local",
                  "node_name": "pve",
                  "url": "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img"
                }
            - name: latest_static_ubuntu_24_noble_qcow2_img
              manifest: |-
                {
                  "content_type": "iso",
                  "datastore_id": "local",
                  "node_name": "pve",
                  "overwrite": false,
                  "url": "https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img"
                }
            - name: release_20231211_ubuntu_22_jammy_lxc_img
              manifest: |-
                {
                  "checksum": "c9997dcfea5d826fd04871f960c513665f2e87dd7450bba99f68a97e60e4586e",
                  "checksum_algorithm": "sha256",
                  "content_type": "vztmpl",
                  "datastore_id": "local",
                  "node_name": "pve",
                  "upload_timeout": 4444,
                  "url": "https://cloud-images.ubuntu.com/releases/22.04/release-20231211/ubuntu-22.04-server-cloudimg-amd64-root.tar.xz"
                }
            - name: latest_ubuntu_22_jammy_lxc_img
              manifest: |-
                {
                  "content_type": "vztmpl",
                  "datastore_id": "local",
                  "node_name": "pve",
                  "url": "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.tar.gz"
                }
        argumentDocs:
            checksum: (String) The expected checksum of the file.
            checksum_algorithm: (String) The algorithm to calculate the checksum of the file. Must be md5 | sha1 | sha224 | sha256 | sha384 | sha512.
            content_type: (String) The file content type. Must be iso or import for VM images or vztmpl for LXC images.
            datastore_id: (String) The identifier for the target datastore.
            decompression_algorithm: (String) Decompress the downloaded file using the specified compression algorithm. Must be one of gz | lzo | zst | bz2.
            file_name: (String) The file name. If not provided, it is calculated using url. PVE will raise 'wrong file extension' error for some popular extensions file .raw or .qcow2 on PVE versions prior to 8.4. Workaround is to use e.g. .img instead.
            id: (String) The unique identifier of this resource.
            node_name: (String) The node name.
            overwrite: (Boolean) By default true. If true and file size has changed in the datastore, it will be replaced. If false, there will be no check.
            overwrite_unmanaged: (Boolean) If true and a file with the same name already exists in the datastore, it will be deleted and the new file will be downloaded. If false and the file already exists, an error will be returned.
            size: (Number) The file size in PVE.
            upload_timeout: (Number) The file download timeout seconds. Default is 600 (10min).
            url: '(String) The URL to download the file from. Must match regex: https?://.*.'
            verify: (Boolean) By default true. If false, no SSL/TLS certificates will be verified.
        importStatements: []
    proxmox_virtual_environment_file:
        subCategory: Virtual Environment
        description: '|  Use this resource to upload files to a Proxmox VE node. The file can be a backup, an ISO image, a snippet, or a container template depending on the content_type attribute.'
        name: proxmox_virtual_environment_file
        title: proxmox_virtual_environment_file
        examples:
            - name: backup
              manifest: |-
                {
                  "content_type": "backup",
                  "datastore_id": "local",
                  "node_name": "pve",
                  "source_file": [
                    {
                      "path": "vzdump-lxc-100-2023_11_08-23_10_05.tar.zst"
                    }
                  ]
                }
            - name: ubuntu_container_template
              manifest: |-
                {
                  "content_type": "iso",
                  "datastore_id": "local",
                  "node_name": "pve",
                  "source_file": [
                    {
                      "path": "https://cloud-images.ubuntu.com/jammy/20230929/jammy-server-cloudimg-amd64-disk-kvm.img"
                    }
                  ]
                }
            - name: ubuntu_container_template
              manifest: |-
                {
                  "content_type": "import",
                  "datastore_id": "local",
                  "node_name": "pve",
                  "source_file": [
                    {
                      "path": "https://cloud-images.ubuntu.com/jammy/20230929/jammy-server-cloudimg-amd64-disk-kvm.img"
                    }
                  ]
                }
            - name: cloud_config
              manifest: |-
                {
                  "content_type": "snippets",
                  "datastore_id": "local",
                  "node_name": "pve",
                  "source_raw": [
                    {
                      "data": "#cloud-config\nchpasswd:\n  list: |\n    ubuntu:example\n  expire: false\nhostname: example-hostname\npackages:\n  - qemu-guest-agent\nusers:\n  - default\n  - name: ubuntu\n    groups: sudo\n    shell: /bin/bash\n    ssh-authorized-keys:\n      - ${trimspace(tls_private_key.example.public_key_openssh)}\n    sudo: ALL=(ALL) NOPASSWD:ALL\n",
                      "file_name": "example.cloud-config.yaml"
                    }
                  ]
                }
            - name: hook_script
              manifest: |-
                {
                  "content_type": "snippets",
                  "datastore_id": "local",
                  "file_mode": "0700",
                  "node_name": "pve",
                  "source_raw": [
                    {
                      "data": "#!/usr/bin/env bash\n\necho \"Running hook script\"\n",
                      "file_name": "prepare-hook.sh"
                    }
                  ]
                }
            - name: ubuntu_container_template
              manifest: |-
                {
                  "content_type": "vztmpl",
                  "datastore_id": "local",
                  "node_name": "first-node",
                  "source_file": [
                    {
                      "path": "http://download.proxmox.com/images/system/ubuntu-20.04-standard_20.04-1_amd64.tar.gz"
                    }
                  ]
                }
        argumentDocs:
            backup: '(allowed extensions: .vzdump, .tar.gz, .tar.xz, tar.zst)'
            checksum: '- (Optional) The SHA256 checksum of the source file.'
            content_type: |-
                - (Optional) The content type. If not specified, the content
                type will be inferred from the file extension. Valid values are:
            data: '- (Required) The raw data.'
            datastore_id: '- (Required) The datastore id.'
            file_mode: '- The file mode in octal format, e.g. 0700 or 600. Note that the prefixes 0o and 0x is not supported! Setting this attribute is also only allowed for root@pam authenticated user.'
            file_modification_date: '- The file modification date (RFC 3339).'
            file_name: |-
                - (Optional) The file name to use instead of the source file
                name. Useful when the source file does not have a valid file extension,
                for example when the source file is a URL referencing a .qcow2 image.
            file_size: '- The file size in bytes.'
            file_tag: '- The file tag.'
            import: '(allowed extensions: .raw, .qcow2, .vmdk)'
            insecure: |-
                - (Optional) Whether to skip the TLS verification step for
                HTTPS sources (defaults to false).
            iso: '(allowed extensions: .iso, .img)'
            min_tls: |-
                - (Optional) The minimum required TLS version for HTTPS
                sources. "Supported values: 1.0|1.1|1.2|1.3 (defaults to 1.3).
            node_name: '- (Required) The node name.'
            overwrite: |-
                - (Optional) Whether to overwrite an existing file (defaults to
                true).
            path: '- (Required) A path to a local file or a URL.'
            resize: '- (Optional) The number of bytes to resize the file to.'
            snippets: '(allowed extensions: any)'
            source_file: |-
                - (Optional) The source file (conflicts with source_raw),
                could be a local file or a URL. If the source file is a URL, the file will
                be downloaded and stored locally before uploading it to Proxmox VE.
            source_raw: '- (Optional) The raw source (conflicts with source_file).'
            timeout_upload: |-
                - (Optional) Timeout for uploading ISO/VSTMPL files in
                seconds (defaults to 1800).
            vztmpl: '(allowed extensions: .tar.gz, .tar.xz, tar.zst)'
        importStatements: []
    proxmox_virtual_environment_firewall_alias:
        subCategory: Virtual Environment
        description: '|  Aliases are used to see what devices or group of devices are affected by a rule. We can create aliases to identify an IP address or a network. Aliases can be created on the cluster level, on VM / Container level.'
        name: proxmox_virtual_environment_firewall_alias
        title: proxmox_virtual_environment_firewall_alias
        examples:
            - name: local_network
              manifest: |-
                {
                  "cidr": "192.168.0.0/23",
                  "comment": "Managed by Terraform",
                  "depends_on": [
                    "${proxmox_virtual_environment_vm.example}"
                  ],
                  "name": "local_network",
                  "node_name": "${proxmox_virtual_environment_vm.example.node_name}",
                  "vm_id": "${proxmox_virtual_environment_vm.example.vm_id}"
                }
              references:
                node_name: proxmox_virtual_environment_vm.example.node_name
                vm_id: proxmox_virtual_environment_vm.example.vm_id
            - name: ubuntu_vm
              manifest: |-
                {
                  "cidr": "192.168.0.1",
                  "comment": "Managed by Terraform",
                  "name": "ubuntu"
                }
        argumentDocs:
            cidr: '- (Required) Network/IP specification in CIDR format.'
            comment: '- (Optional) Alias comment.'
            container_id: '- (Optional) Container ID. Leave empty for cluster level aliases.'
            name: '- (Required) Alias name.'
            node_name: '- (Optional) Node name. Leave empty for cluster level aliases.'
            vm_id: '- (Optional) VM ID. Leave empty for cluster level aliases.'
        importStatements: []
    proxmox_virtual_environment_firewall_ipset:
        subCategory: Virtual Environment
        description: '|  An IPSet allows us to group multiple IP addresses, IP subnets and aliases. Aliases can be created on the cluster level, on VM / Container level.'
        name: proxmox_virtual_environment_firewall_ipset
        title: proxmox_virtual_environment_firewall_ipset
        examples:
            - name: ipset
              manifest: |-
                {
                  "cidr": [
                    {
                      "comment": "Local network 1",
                      "name": "192.168.0.0/23"
                    },
                    {
                      "comment": "Server 1",
                      "name": "192.168.0.1",
                      "nomatch": true
                    },
                    {
                      "comment": "Server 1",
                      "name": "192.168.2.1"
                    }
                  ],
                  "comment": "Managed by Terraform",
                  "depends_on": [
                    "${proxmox_virtual_environment_vm.example}"
                  ],
                  "name": "local_network",
                  "node_name": "${proxmox_virtual_environment_vm.example.node_name}",
                  "vm_id": "${proxmox_virtual_environment_vm.example.vm_id}"
                }
              references:
                node_name: proxmox_virtual_environment_vm.example.node_name
                vm_id: proxmox_virtual_environment_vm.example.vm_id
        argumentDocs:
            cidr: '- (Optional) IP/CIDR block (multiple blocks supported).'
            comment: '- (Optional) IPSet comment.'
            container_id: '- (Optional) Container ID. Leave empty for cluster level ipsets.'
            name: '- (Required) IPSet name.'
            node_name: '- (Optional) Node name. Leave empty for cluster level ipsets.'
            nomatch: |-
                - (Optional) Entries marked as nomatch are skipped as if those
                were not added to the set.
            vm_id: '- (Optional) VM ID. Leave empty for cluster level ipsets.'
        importStatements: []
    proxmox_virtual_environment_firewall_options:
        subCategory: Virtual Environment
        description: '|  Manages firewall options on VM / Container level.'
        name: proxmox_virtual_environment_firewall_options
        title: proxmox_virtual_environment_firewall_options
        examples:
            - name: example
              manifest: |-
                {
                  "depends_on": [
                    "${proxmox_virtual_environment_vm.example}"
                  ],
                  "dhcp": true,
                  "enabled": false,
                  "input_policy": "ACCEPT",
                  "ipfilter": true,
                  "log_level_in": "info",
                  "log_level_out": "info",
                  "macfilter": false,
                  "ndp": true,
                  "node_name": "${proxmox_virtual_environment_vm.example.node_name}",
                  "output_policy": "ACCEPT",
                  "radv": true,
                  "vm_id": "${proxmox_virtual_environment_vm.example.vm_id}"
                }
              references:
                node_name: proxmox_virtual_environment_vm.example.node_name
                vm_id: proxmox_virtual_environment_vm.example.vm_id
        argumentDocs:
            container_id: '- (Optional) Container ID.'
            dhcp: '- (Optional) Enable DHCP.'
            enabled: '- (Optional) Enable or disable the firewall.'
            input_policy: |-
                - (Optional) The default input
                policy (ACCEPT, DROP, REJECT).
            ipfilter: |-
                - (Optional) Enable default IP filters. This is equivalent to
                adding an empty ipfilter-net<id> ipset for every interface. Such ipsets
                implicitly contain sane default restrictions such as restricting IPv6 link
                local addresses to the one derived from the interface's MAC address. For
                containers the configured IP addresses will be implicitly added.
            log_level_in: |-
                - (Optional) Log level for incoming
                packets (emerg, alert, crit, err, warning, notice, info,
                debug, nolog).
            log_level_out: |-
                - (Optional) Log level for outgoing
                packets (emerg, alert, crit, err, warning, notice, info,
                debug, nolog).
            macfilter: '- (Optional) Enable/disable MAC address filter.'
            ndp: '- (Optional) Enable NDP (Neighbor Discovery Protocol).'
            node_name: '- (Required) Node name.'
            output_policy: |-
                - (Optional) The default output
                policy (ACCEPT, DROP, REJECT).
            radv: '- (Optional) Enable Router Advertisement.'
            vm_id: '- (Optional) VM ID.'
        importStatements: []
    proxmox_virtual_environment_firewall_rules:
        subCategory: Virtual Environment
        description: '|  A security group is a collection of rules, defined at cluster level, which can be used in all VMs'' rules. For example, you can define a group named “webserver” with rules to open the http and https ports. Rules can be created on the cluster level, on VM / Container level.'
        name: proxmox_virtual_environment_firewall_rules
        title: proxmox_virtual_environment_firewall_rules
        examples:
            - name: inbound
              manifest: |-
                {
                  "depends_on": [
                    "${proxmox_virtual_environment_vm.example}",
                    "${proxmox_virtual_environment_cluster_firewall_security_group.example}"
                  ],
                  "node_name": "${proxmox_virtual_environment_vm.example.node_name}",
                  "rule": [
                    {
                      "action": "ACCEPT",
                      "comment": "Allow HTTP",
                      "dest": "192.168.1.5",
                      "dport": "80",
                      "log": "info",
                      "proto": "tcp",
                      "type": "in"
                    },
                    {
                      "action": "ACCEPT",
                      "comment": "Allow HTTPS",
                      "dest": "192.168.1.5",
                      "dport": "443",
                      "log": "info",
                      "proto": "tcp",
                      "type": "in"
                    },
                    {
                      "comment": "From security group",
                      "iface": "net0",
                      "security_group": "${proxmox_virtual_environment_cluster_firewall_security_group.example.name}"
                    }
                  ],
                  "vm_id": "${proxmox_virtual_environment_vm.example.vm_id}"
                }
              references:
                node_name: proxmox_virtual_environment_vm.example.node_name
                rule.security_group: proxmox_virtual_environment_cluster_firewall_security_group.example.name
                vm_id: proxmox_virtual_environment_vm.example.vm_id
        argumentDocs:
            action: '- (Required) Rule action (ACCEPT, DROP, REJECT).'
            comment: '- (Optional) Rule comment.'
            container_id: |-
                - (Optional) Container ID. Leave empty for cluster level
                rules.
            dest: |-
                - (Optional) Restrict packet destination address. This can
                refer to a single IP address, an IP set ('+ipsetname') or an IP
                alias definition. You can also specify an address range
                like 20.34.101.207-201.3.9.99, or a list of IP addresses and
                networks (entries are separated by comma). Please do not mix IPv4
                and IPv6 addresses inside such lists.
            dport: |-
                - (Optional) Restrict TCP/UDP destination port. You can use
                service names or simple numbers (0-65535), as defined
                in /etc/services. Port ranges can be specified with '\d+:\d+', for
                example 80:85, and you can use comma separated list to match
                several ports or ranges.
            enabled: '- (Optional) Enable this rule. Defaults to true.'
            iface: |-
                - (Optional) Network interface name. You have to use network
                configuration key names for VMs and containers ('net\d+'). Host
                related rules can use arbitrary strings.
            log: |-
                - (Optional) Log level for this rule (emerg, alert, crit,
                err, warning, notice, info, debug, nolog).
            macro: |-
                - (Optional) Macro name. Use predefined standard macro
                from https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_firewall_macro_definitions
            node_name: '- (Optional) Node name. Leave empty for cluster level rules.'
            pos: '- Position of the rule in the list.'
            proto: |-
                - (Optional) Restrict packet protocol. You can use protocol
                names as defined in '/etc/protocols'.
            rule: |-
                - (Optional) Firewall rule block (multiple blocks supported).
                The provider supports two types of the rule blocks:
            security_group: '- (Required) Security group name.'
            source: |-
                - (Optional) Restrict packet source address. This can refer
                to a single IP address, an IP set ('+ipsetname') or an IP alias
                definition. You can also specify an address range
                like 20.34.101.207-201.3.9.99, or a list of IP addresses and
                networks (entries are separated by comma). Please do not mix IPv4
                and IPv6 addresses inside such lists.
            sport: |-
                - (Optional) Restrict TCP/UDP source port. You can use
                service names or simple numbers (0-65535), as defined
                in /etc/services. Port ranges can be specified with '\d+:\d+', for
                example 80:85, and you can use comma separated list to match
                several ports or ranges.
            type: '- (Required) Rule type (in, out, forward).'
            vm_id: '- (Optional) VM ID. Leave empty for cluster level rules.'
        importStatements: []
    proxmox_virtual_environment_group:
        subCategory: Virtual Environment
        description: '|  Manages a user group.'
        name: proxmox_virtual_environment_group
        title: proxmox_virtual_environment_group
        examples:
            - name: operations_team
              manifest: |-
                {
                  "comment": "Managed by Terraform",
                  "group_id": "operations-team"
                }
        argumentDocs:
            acl: '- (Optional) The access control list (multiple blocks supported).'
            comment: '- (Optional) The group comment.'
            group_id: '- (Required) The group identifier.'
            members: '- The group members as a list of username@realm entries'
            path: '- The path.'
            propagate: '- Whether to propagate to child paths.'
            role_id: '- The role identifier.'
        importStatements: []
    proxmox_virtual_environment_hagroup:
        subCategory: Virtual Environment
        description: Manages a High Availability group in a Proxmox VE cluster.
        name: proxmox_virtual_environment_hagroup
        title: proxmox_virtual_environment_hagroup
        examples:
            - name: example
              manifest: |-
                {
                  "comment": "This is a comment.",
                  "group": "example",
                  "no_failback": false,
                  "nodes": {
                    "node1": null,
                    "node2": 2,
                    "node3": 1
                  },
                  "restricted": true
                }
        argumentDocs:
            comment: (String) The comment associated with this group
            group: (String) The identifier of the High Availability group to manage.
            id: (String) The unique identifier of this resource.
            no_failback: (Boolean) A flag that indicates that failing back to a higher priority node is disabled for this HA group. Defaults to false.
            nodes: '(Map of Number) The member nodes for this group. They are provided as a map, where the keys are the node names and the values represent their priority: integers for known priorities or null for unset priorities.'
            restricted: (Boolean) A flag that indicates that other nodes may not be used to run resources associated to this HA group. Defaults to false.
        importStatements:
            - |-
              #!/usr/bin/env sh
              # HA groups can be imported using their name, e.g.:
              terraform import proxmox_virtual_environment_hagroup.example example
    proxmox_virtual_environment_hardware_mapping_dir:
        subCategory: Virtual Environment
        description: Manages a directory mapping in a Proxmox VE cluster.
        name: proxmox_virtual_environment_hardware_mapping_dir
        title: proxmox_virtual_environment_hardware_mapping_dir
        examples:
            - name: example
              manifest: |-
                {
                  "comment": "This is a comment",
                  "map": [
                    {
                      "node": "pve",
                      "path": "/mnt/data"
                    }
                  ],
                  "name": "example"
                }
        argumentDocs:
            comment: (String) The comment of this directory mapping.
            id: (String) The unique identifier of this directory mapping resource.
            map: (Attributes Set) The actual map of devices for the hardware mapping. (see below for nested schema)
            name: (String) The name of this directory mapping.
            node: (String) The node this mapping applies to.
            path: (String) The path of the map. For directory mappings the path is required and refers to the POSIX path of the directory as visible from the node.
        importStatements:
            - |-
              #!/usr/bin/env sh
              # A directory mapping can be imported using their name, e.g.:
              terraform import proxmox_virtual_environment_hardware_mapping_dir.example example
    proxmox_virtual_environment_hardware_mapping_pci:
        subCategory: Virtual Environment
        description: Manages a PCI hardware mapping in a Proxmox VE cluster.
        name: proxmox_virtual_environment_hardware_mapping_pci
        title: proxmox_virtual_environment_hardware_mapping_pci
        examples:
            - name: example
              manifest: |-
                {
                  "comment": "This is a comment",
                  "map": [
                    {
                      "comment": "This is a device specific comment",
                      "id": "8086:5916",
                      "iommu_group": 0,
                      "node": "pve",
                      "path": "0000:00:02.0",
                      "subsystem_id": "8086:2068"
                    }
                  ],
                  "mediated_devices": true,
                  "name": "example"
                }
        argumentDocs:
            comment: (String) The comment of this PCI hardware mapping.
            id: (String) The unique identifier of this PCI hardware mapping resource.
            iommu_group: (Number) The IOMMU group of the map. Not mandatory for the Proxmox VE API call, but causes a PCI hardware mapping to be incomplete when not set
            map: (Attributes Set) The actual map of devices for the PCI hardware mapping. (see below for nested schema)
            mediated_devices: (Boolean) Indicates whether to enable mediated devices.
            name: (String) The name of this PCI hardware mapping.
            node: (String) The node name of the map.
            path: (String) The path of the map.
            subsystem_id: (String) The subsystem ID group of the map. Not mandatory for the Proxmox VE API call, but causes a PCI hardware mapping to be incomplete when not set
        importStatements:
            - |-
              #!/usr/bin/env sh
              # A PCI hardware mapping can be imported using their name, e.g.:
              terraform import proxmox_virtual_environment_hardware_mapping_pci.example example
    proxmox_virtual_environment_hardware_mapping_usb:
        subCategory: Virtual Environment
        description: Manages a USB hardware mapping in a Proxmox VE cluster.
        name: proxmox_virtual_environment_hardware_mapping_usb
        title: proxmox_virtual_environment_hardware_mapping_usb
        examples:
            - name: example
              manifest: |-
                {
                  "comment": "This is a comment",
                  "map": [
                    {
                      "comment": "This is a device specific comment",
                      "id": "8087:0a2b",
                      "node": "pve",
                      "path": "1-8.2"
                    }
                  ],
                  "name": "example"
                }
        argumentDocs:
            comment: (String) The comment of this USB hardware mapping.
            id: (String) The unique identifier of this USB hardware mapping resource.
            map: (Attributes Set) The actual map of devices for the hardware mapping. (see below for nested schema)
            name: (String) The name of this hardware mapping.
            node: (String) The node name of the map.
            path: (String) The path of the map. For hardware mappings of type USB the path is optional and indicates that the device is mapped through the device ID instead of ports.
        importStatements:
            - |-
              #!/usr/bin/env sh
              # A USB hardware mapping can be imported using their name, e.g.:
              terraform import proxmox_virtual_environment_hardware_mapping_usb.example example
    proxmox_virtual_environment_haresource:
        subCategory: Virtual Environment
        description: Manages Proxmox HA resources.
        name: proxmox_virtual_environment_haresource
        title: proxmox_virtual_environment_haresource
        examples:
            - name: example
              manifest: |-
                {
                  "comment": "Managed by Terraform",
                  "depends_on": [
                    "${proxmox_virtual_environment_hagroup.example}"
                  ],
                  "group": "example",
                  "resource_id": "vm:123",
                  "state": "started"
                }
        argumentDocs:
            comment: (String) The comment associated with this resource.
            group: (String) The identifier of the High Availability group this resource is a member of.
            id: (String) The unique identifier of this resource.
            max_relocate: (Number) The maximal number of relocation attempts.
            max_restart: (Number) The maximal number of restart attempts.
            resource_id: (String) The Proxmox HA resource identifier
            state: (String) The desired state of the resource.
            type: (String) The type of HA resources to create. If unset, it will be deduced from the resource_id.
        importStatements:
            - |-
              #!/usr/bin/env sh
              # HA resources can be imported using their identifiers, e.g.:
              terraform import proxmox_virtual_environment_haresource.example vm:123
    proxmox_virtual_environment_hosts:
        subCategory: Virtual Environment
        description: '|  Manages the host entries on a specific node.'
        name: proxmox_virtual_environment_hosts
        title: proxmox_virtual_environment_hosts
        examples:
            - name: first_node_host_entries
              manifest: |-
                {
                  "entry": [
                    {
                      "address": "127.0.0.1",
                      "hostnames": [
                        "localhost",
                        "localhost.localdomain"
                      ]
                    }
                  ],
                  "node_name": "first-node"
                }
        argumentDocs:
            address: '- (Required) The IP address.'
            addresses: '- The IP addresses.'
            digest: '- The SHA1 digest.'
            entries: |-
                - The host entries (conversion of addresses and hostnames into
                objects).
            entry: '- (Required) A host entry (multiple blocks supported).'
            hostnames: '- (Required) The hostnames.'
            node_name: '- (Required) A node name.'
        importStatements: []
    proxmox_virtual_environment_metrics_server:
        subCategory: Virtual Environment
        description: Manages PVE metrics server.
        name: proxmox_virtual_environment_metrics_server
        title: proxmox_virtual_environment_metrics_server
        examples:
            - name: influxdb_server
              manifest: |-
                {
                  "name": "example_influxdb_server",
                  "port": 8089,
                  "server": "192.168.3.2",
                  "type": "influxdb"
                }
            - name: graphite_server
              manifest: |-
                {
                  "name": "example_graphite_server",
                  "port": 2003,
                  "server": "192.168.4.2",
                  "type": "graphite"
                }
        argumentDocs:
            disable: (Boolean) Set this to true to disable this metric server.
            graphite_path: '(String) Root graphite path (ex: proxmox.mycluster.mykey).'
            graphite_proto: (String) Protocol to send graphite data. Choice is between udp | tcp. If not set, PVE default is udp.
            id: (String) The unique identifier of this resource.
            influx_api_path_prefix: (String) An API path prefix inserted between <host>:<port>/ and /api2/. Can be useful if the InfluxDB service runs behind a reverse proxy.
            influx_bucket: (String) The InfluxDB bucket/db. Only necessary when using the http v2 api.
            influx_db_proto: (String) Protocol for InfluxDB. Choice is between udp | http | https. If not set, PVE default is udp.
            influx_max_body_size: (Number) InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is 25000000.
            influx_organization: (String) The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
            influx_token: (String, Sensitive) The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use user:password instead.
            influx_verify: (Boolean) Set to false to disable certificate verification for https endpoints.
            mtu: (Number) MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is 1500 (allowed 512 - 65536).
            name: (String) Unique name that will be ID of this metric server in PVE.
            port: (Number) Server network port.
            server: (String) Server dns name or IP address.
            timeout: (Number) TCP socket timeout in seconds. If not set, PVE default is 1.
            type: (String) Plugin type. Choice is between graphite | influxdb.
        importStatements:
            - |-
              #!/usr/bin/env sh
              terraform import proxmox_virtual_environment_metrics_server.example example
    proxmox_virtual_environment_network_linux_bridge:
        subCategory: Virtual Environment
        description: Manages a Linux Bridge network interface in a Proxmox VE node.
        name: proxmox_virtual_environment_network_linux_bridge
        title: proxmox_virtual_environment_network_linux_bridge
        examples:
            - name: vmbr99
              manifest: |-
                {
                  "address": "99.99.99.99/16",
                  "comment": "vmbr99 comment",
                  "depends_on": [
                    "${proxmox_virtual_environment_network_linux_vlan.vlan99}"
                  ],
                  "name": "vmbr99",
                  "node_name": "pve",
                  "ports": [
                    "ens18.99"
                  ]
                }
              dependencies:
                proxmox_virtual_environment_network_linux_vlan.vlan99: |-
                    {
                      "name": "ens18.99",
                      "node_name": "pve"
                    }
        argumentDocs:
            address: (String) The interface IPv4/CIDR address.
            address6: (String) The interface IPv6/CIDR address.
            autostart: (Boolean) Automatically start interface on boot (defaults to true).
            comment: (String) Comment for the interface.
            gateway: (String) Default gateway address.
            gateway6: (String) Default IPv6 gateway address.
            id: (String) A unique identifier with format <node name>:<iface>
            mtu: (Number) The interface MTU.
            name: (String) The interface name. Commonly vmbr[N], where 0 ≤ N ≤ 4094 (vmbr0 - vmbr4094), but can be any alphanumeric string that starts with a character and is at most 10 characters long.
            node_name: (String) The name of the node.
            ports: (List of String) The interface bridge ports.
            vlan_aware: (Boolean) Whether the interface bridge is VLAN aware (defaults to false).
        importStatements:
            - |-
              #!/usr/bin/env sh
              #Interfaces can be imported using the `node_name:iface` format, e.g.
              terraform import proxmox_virtual_environment_network_linux_bridge.vmbr99 pve:vmbr99
    proxmox_virtual_environment_network_linux_vlan:
        subCategory: Virtual Environment
        description: Manages a Linux VLAN network interface in a Proxmox VE node.
        name: proxmox_virtual_environment_network_linux_vlan
        title: proxmox_virtual_environment_network_linux_vlan
        examples:
            - name: vlan99
              manifest: |-
                {
                  "comment": "VLAN 99",
                  "name": "eno0.99",
                  "node_name": "pve"
                }
            - name: vlan98
              manifest: |-
                {
                  "comment": "VLAN 98",
                  "interface": "eno0",
                  "name": "vlan_lab",
                  "node_name": "pve",
                  "vlan": 98
                }
        argumentDocs:
            address: (String) The interface IPv4/CIDR address.
            address6: (String) The interface IPv6/CIDR address.
            autostart: (Boolean) Automatically start interface on boot (defaults to true).
            comment: (String) Comment for the interface.
            gateway: (String) Default gateway address.
            gateway6: (String) Default IPv6 gateway address.
            id: (String) A unique identifier with format <node name>:<iface>.
            interface: (String) The VLAN raw device. See also name.
            mtu: (Number) The interface MTU.
            name: (String) The interface name. Either add the VLAN tag number to an existing interface name, e.g. ens18.21 (and do not set interface and vlan), or use custom name, e.g. vlan_lab (interface and vlan are then required).
            node_name: (String) The name of the node.
            vlan: (Number) The VLAN tag. See also name.
        importStatements:
            - |-
              #!/usr/bin/env sh
              #Interfaces can be imported using the `node_name:iface` format, e.g.
              terraform import proxmox_virtual_environment_network_linux_vlan.vlan99 pve:vlan99
    proxmox_virtual_environment_pool:
        subCategory: Virtual Environment
        description: '|  Manages a resource pool.'
        name: proxmox_virtual_environment_pool
        title: proxmox_virtual_environment_pool
        examples:
            - name: operations_pool
              manifest: |-
                {
                  "comment": "Managed by Terraform",
                  "pool_id": "operations-pool"
                }
        argumentDocs:
            comment: '- (Optional) The pool comment.'
            datastore_id: '- The datastore identifier.'
            id: '- The member identifier.'
            members: '- The pool members.'
            node_name: '- The node name.'
            pool_id: '- (Required) The pool identifier.'
            type: '- The member type.'
            vm_id: '- The virtual machine identifier.'
        importStatements: []
    proxmox_virtual_environment_role:
        subCategory: Virtual Environment
        description: '|  Manages a role.'
        name: proxmox_virtual_environment_role
        title: proxmox_virtual_environment_role
        examples:
            - name: operations_monitoring
              manifest: |-
                {
                  "privileges": [
                    "VM.Monitor"
                  ],
                  "role_id": "operations-monitoring"
                }
        argumentDocs:
            privileges: '- (Required) The role privileges.'
            role_id: '- (Required) The role identifier.'
        importStatements: []
    proxmox_virtual_environment_sdn_zone_evpn:
        subCategory: Virtual Environment
        description: EVPN Zone in Proxmox SDN. The EVPN zone creates a routable Layer 3 network, capable of spanning across multiple clusters.
        name: proxmox_virtual_environment_sdn_zone_evpn
        title: proxmox_virtual_environment_sdn_zone_evpn
        examples:
            - name: example
              manifest: |-
                {
                  "advertise_subnets": true,
                  "controller": "evpn-controller1",
                  "disable_arp_nd_suppression": false,
                  "dns": "1.1.1.1",
                  "dns_zone": "example.com",
                  "exit_nodes": [
                    "pve-exit1",
                    "pve-exit2"
                  ],
                  "exit_nodes_local_routing": true,
                  "id": "evpn1",
                  "ipam": "pve",
                  "mtu": 1450,
                  "nodes": [
                    "pve"
                  ],
                  "primary_exit_node": "pve-exit1",
                  "reverse_dns": "1.1.1.1",
                  "rt_import": "65000:65000",
                  "vrf_vxlan": 4000
                }
        argumentDocs:
            advertise_subnets: (Boolean) Enable subnet advertisement for EVPN.
            controller: (String) EVPN controller address.
            disable_arp_nd_suppression: (Boolean) Disable ARP/ND suppression for EVPN.
            dns: (String) DNS API server address.
            dns_zone: (String) DNS domain name. Used to register hostnames, such as <hostname>.<domain>. The DNS zone must already exist on the DNS server.
            exit_nodes: (Set of String) List of exit nodes for EVPN.
            exit_nodes_local_routing: (Boolean) Enable local routing for EVPN exit nodes.
            id: (String) The unique identifier of the SDN zone.
            ipam: (String) IP Address Management system.
            mtu: (Number) MTU value for the zone.
            nodes: (Set of String) The Proxmox nodes which the zone and associated VNets should be deployed on
            primary_exit_node: (String) Primary exit node for EVPN.
            reverse_dns: (String) Reverse DNS API server address.
            rt_import: (String) Route target import for EVPN.
            vrf_vxlan: (Number) VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
        importStatements:
            - |-
              #!/usr/bin/env sh
              # EVPN SDN zone can be imported using its unique identifier (zone ID)
              terraform import proxmox_virtual_environment_sdn_zone_evpn.example evpn1
    proxmox_virtual_environment_sdn_zone_qinq:
        subCategory: Virtual Environment
        description: QinQ Zone in Proxmox SDN. QinQ also known as VLAN stacking, that uses multiple layers of VLAN tags for isolation. The QinQ zone defines the outer VLAN tag (the Service VLAN) whereas the inner VLAN tag is defined by the VNet. Your physical network switches must support stacked VLANs for this configuration. Due to the double stacking of tags, you need 4 more bytes for QinQ VLANs. For example, you must reduce the MTU to 1496 if you physical interface MTU is 1500.
        name: proxmox_virtual_environment_sdn_zone_qinq
        title: proxmox_virtual_environment_sdn_zone_qinq
        examples:
            - name: example
              manifest: |-
                {
                  "bridge": "vmbr0",
                  "dns": "1.1.1.1",
                  "dns_zone": "example.com",
                  "id": "qinq1",
                  "ipam": "pve",
                  "mtu": 1496,
                  "nodes": [
                    "pve"
                  ],
                  "reverse_dns": "1.1.1.1",
                  "service_vlan": 100,
                  "service_vlan_protocol": "802.1ad"
                }
        argumentDocs:
            bridge: (String) A local, VLAN-aware bridge that is already configured on each local node
            dns: (String) DNS API server address.
            dns_zone: (String) DNS domain name. Used to register hostnames, such as <hostname>.<domain>. The DNS zone must already exist on the DNS server.
            id: (String) The unique identifier of the SDN zone.
            ipam: (String) IP Address Management system.
            mtu: (Number) MTU value for the zone.
            nodes: (Set of String) The Proxmox nodes which the zone and associated VNets should be deployed on
            reverse_dns: (String) Reverse DNS API server address.
            service_vlan: (Number) Service VLAN tag for QinQ. The tag must be between 1 and 4094.
            service_vlan_protocol: (String) Service VLAN protocol for QinQ. The protocol must be 802.1ad or 802.1q.
        importStatements:
            - |-
              #!/usr/bin/env sh
              # QinQ SDN zone can be imported using its unique identifier (zone ID)
              terraform import proxmox_virtual_environment_sdn_zone_qinq.example qinq1
    proxmox_virtual_environment_sdn_zone_simple:
        subCategory: Virtual Environment
        description: Simple Zone in Proxmox SDN. It will create an isolated VNet bridge. This bridge is not linked to a physical interface, and VM traffic is only local on each the node. It can be used in NAT or routed setups.
        name: proxmox_virtual_environment_sdn_zone_simple
        title: proxmox_virtual_environment_sdn_zone_simple
        examples:
            - name: example
              manifest: |-
                {
                  "dns": "1.1.1.1",
                  "dns_zone": "example.com",
                  "id": "simple1",
                  "ipam": "pve",
                  "mtu": 1500,
                  "nodes": [
                    "pve"
                  ],
                  "reverse_dns": "1.1.1.1"
                }
        argumentDocs:
            dns: (String) DNS API server address.
            dns_zone: (String) DNS domain name. Used to register hostnames, such as <hostname>.<domain>. The DNS zone must already exist on the DNS server.
            id: (String) The unique identifier of the SDN zone.
            ipam: (String) IP Address Management system.
            mtu: (Number) MTU value for the zone.
            nodes: (Set of String) The Proxmox nodes which the zone and associated VNets should be deployed on
            reverse_dns: (String) Reverse DNS API server address.
        importStatements:
            - |-
              #!/usr/bin/env sh
              # Simple SDN zone can be imported using its unique identifier (zone ID)
              terraform import proxmox_virtual_environment_sdn_zone_simple.example simple1
    proxmox_virtual_environment_sdn_zone_vlan:
        subCategory: Virtual Environment
        description: VLAN Zone in Proxmox SDN. It uses an existing local Linux or OVS bridge to connect to the node's physical interface. It uses VLAN tagging defined in the VNet to isolate the network segments. This allows connectivity of VMs between different nodes.
        name: proxmox_virtual_environment_sdn_zone_vlan
        title: proxmox_virtual_environment_sdn_zone_vlan
        examples:
            - name: example
              manifest: |-
                {
                  "bridge": "vmbr0",
                  "dns": "1.1.1.1",
                  "dns_zone": "example.com",
                  "id": "vlan1",
                  "ipam": "pve",
                  "mtu": 1500,
                  "nodes": [
                    "pve"
                  ],
                  "reverse_dns": "1.1.1.1"
                }
        argumentDocs:
            bridge: (String) The local bridge or OVS switch, already configured on each node that allows node-to-node connection.
            dns: (String) DNS API server address.
            dns_zone: (String) DNS domain name. Used to register hostnames, such as <hostname>.<domain>. The DNS zone must already exist on the DNS server.
            id: (String) The unique identifier of the SDN zone.
            ipam: (String) IP Address Management system.
            mtu: (Number) MTU value for the zone.
            nodes: (Set of String) The Proxmox nodes which the zone and associated VNets should be deployed on
            reverse_dns: (String) Reverse DNS API server address.
        importStatements:
            - |-
              #!/usr/bin/env sh
              # VLAN SDN zone can be imported using its unique identifier (zone ID)
              terraform import proxmox_virtual_environment_sdn_zone_vlan.example vlan1
    proxmox_virtual_environment_sdn_zone_vxlan:
        subCategory: Virtual Environment
        description: VXLAN Zone in Proxmox SDN. It establishes a tunnel (overlay) on top of an existing network (underlay). This encapsulates layer 2 Ethernet frames within layer 4 UDP datagrams using the default destination port 4789. You have to configure the underlay network yourself to enable UDP connectivity between all peers. Because VXLAN encapsulation uses 50 bytes, the MTU needs to be 50 bytes lower than the outgoing physical interface.
        name: proxmox_virtual_environment_sdn_zone_vxlan
        title: proxmox_virtual_environment_sdn_zone_vxlan
        examples:
            - name: example
              manifest: |-
                {
                  "dns": "1.1.1.1",
                  "dns_zone": "example.com",
                  "id": "vxlan1",
                  "ipam": "pve",
                  "mtu": 1450,
                  "nodes": [
                    "pve"
                  ],
                  "peers": [
                    "10.0.0.1",
                    "10.0.0.2",
                    "10.0.0.3"
                  ],
                  "reverse_dns": "1.1.1.1"
                }
        argumentDocs:
            dns: (String) DNS API server address.
            dns_zone: (String) DNS domain name. Used to register hostnames, such as <hostname>.<domain>. The DNS zone must already exist on the DNS server.
            id: (String) The unique identifier of the SDN zone.
            ipam: (String) IP Address Management system.
            mtu: (Number) MTU value for the zone.
            nodes: (Set of String) The Proxmox nodes which the zone and associated VNets should be deployed on
            peers: (Set of String) A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
            reverse_dns: (String) Reverse DNS API server address.
        importStatements:
            - |-
              #!/usr/bin/env sh
              # VXLAN SDN zone can be imported using its unique identifier (zone ID)
              terraform import proxmox_virtual_environment_sdn_zone_vxlan.example vxlan1
    proxmox_virtual_environment_time:
        subCategory: Virtual Environment
        description: '|  Manages the time for a specific node.'
        name: proxmox_virtual_environment_time
        title: proxmox_virtual_environment_time
        examples:
            - name: first_node_time
              manifest: |-
                {
                  "node_name": "first-node",
                  "time_zone": "UTC"
                }
        argumentDocs:
            local_time: '- The node''s local time.'
            node_name: '- (Required) A node name.'
            time_zone: '- (Required) The node''s time zone.'
            utc_time: '- The node''s local time formatted as UTC.'
        importStatements: []
    proxmox_virtual_environment_user:
        subCategory: Virtual Environment
        description: '|  Manages a user.'
        name: proxmox_virtual_environment_user
        title: proxmox_virtual_environment_user
        examples:
            - name: operations_automation
              manifest: |-
                {
                  "acl": [
                    {
                      "path": "/vms/1234",
                      "propagate": true,
                      "role_id": "${proxmox_virtual_environment_role.operations_monitoring.role_id}"
                    }
                  ],
                  "comment": "Managed by Terraform",
                  "password": "a-strong-password",
                  "user_id": "operations-automation@pve"
                }
              references:
                acl.role_id: proxmox_virtual_environment_role.operations_monitoring.role_id
              dependencies:
                proxmox_virtual_environment_role.operations_monitoring: |-
                    {
                      "privileges": [
                        "VM.Monitor"
                      ],
                      "role_id": "operations-monitoring"
                    }
        argumentDocs:
            acl: '- (Optional) The access control list (multiple blocks supported).'
            comment: '- (Optional) The user comment.'
            email: '- (Optional) The user''s email address.'
            enabled: '- (Optional) Whether the user account is enabled.'
            expiration_date: '- (Optional) The user account''s expiration date (RFC 3339).'
            first_name: '- (Optional) The user''s first name.'
            groups: '- (Optional) The user''s groups.'
            keys: '- (Optional) The user''s keys.'
            last_name: '- (Optional) The user''s last name.'
            password: '- (Optional) The user''s password. Required for PVE or PAM realms.'
            path: '- The path.'
            propagate: '- Whether to propagate to child paths.'
            role_id: '- The role identifier.'
            user_id: '- (Required) The user identifier.'
        importStatements: []
    proxmox_virtual_environment_user_token:
        subCategory: Virtual Environment
        description: User API tokens.
        name: proxmox_virtual_environment_user_token
        title: proxmox_virtual_environment_user_token
        examples:
            - name: user_token
              manifest: |-
                {
                  "comment": "Managed by Terraform",
                  "expiration_date": "2033-01-01T22:00:00Z",
                  "token_name": "tk1",
                  "user_id": "${proxmox_virtual_environment_user.user.user_id}"
                }
              references:
                user_id: proxmox_virtual_environment_user.user.user_id
              dependencies:
                proxmox_virtual_environment_user.user: |-
                    {
                      "comment": "Managed by Terraform",
                      "email": "user@pve",
                      "enabled": true,
                      "expiration_date": "2034-01-01T22:00:00Z",
                      "user_id": "user@pve"
                    }
        argumentDocs:
            comment: (String) Comment for the token.
            expiration_date: (String) Expiration date for the token.
            id: (String) Unique token identifier with format <user_id>!<token_name>.
            privileges_separation: (Boolean) Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.
            token_name: (String) User-specific token identifier.
            user_id: (String) User identifier.
            value: (String, Sensitive) API token value used for authentication. It is populated only when creating a new token, and can't be retrieved at import.
        importStatements:
            - |-
              #!/usr/bin/env sh
              #Tokens can be imported using they identifiers in format `user_id!token_name` format, e.g.:
              terraform import proxmox_virtual_environment_user_token.token1 user@pve!token1
    proxmox_virtual_environment_vm:
        subCategory: Virtual Environment
        description: '|  Manages a virtual machine.'
        name: proxmox_virtual_environment_vm
        title: proxmox_virtual_environment_vm
        examples:
            - name: ubuntu_vm
              manifest: |-
                {
                  "agent": [
                    {
                      "enabled": false
                    }
                  ],
                  "cpu": [
                    {
                      "cores": 2,
                      "type": "x86-64-v2-AES"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "disk": [
                    {
                      "datastore_id": "local-lvm",
                      "import_from": "${proxmox_virtual_environment_download_file.latest_ubuntu_22_jammy_qcow2_img.id}",
                      "interface": "scsi0"
                    }
                  ],
                  "initialization": [
                    {
                      "ip_config": [
                        {
                          "ipv4": [
                            {
                              "address": "dhcp"
                            }
                          ]
                        }
                      ],
                      "user_account": [
                        {
                          "keys": [
                            "${trimspace(tls_private_key.ubuntu_vm_key.public_key_openssh)}"
                          ],
                          "password": "${random_password.ubuntu_vm_password.result}",
                          "username": "ubuntu"
                        }
                      ],
                      "user_data_file_id": "${proxmox_virtual_environment_file.cloud_config.id}"
                    }
                  ],
                  "memory": [
                    {
                      "dedicated": 2048,
                      "floating": 2048
                    }
                  ],
                  "name": "terraform-provider-proxmox-ubuntu-vm",
                  "network_device": [
                    {
                      "bridge": "vmbr0"
                    }
                  ],
                  "node_name": "first-node",
                  "operating_system": [
                    {
                      "type": "l26"
                    }
                  ],
                  "serial_device": [
                    {}
                  ],
                  "startup": [
                    {
                      "down_delay": "60",
                      "order": "3",
                      "up_delay": "60"
                    }
                  ],
                  "stop_on_destroy": true,
                  "tags": [
                    "terraform",
                    "ubuntu"
                  ],
                  "tpm_state": [
                    {
                      "version": "v2.0"
                    }
                  ],
                  "virtiofs": [
                    {
                      "cache": "always",
                      "direct_io": true,
                      "mapping": "data_share"
                    }
                  ],
                  "vm_id": 4321
                }
              references:
                disk.import_from: proxmox_virtual_environment_download_file.latest_ubuntu_22_jammy_qcow2_img.id
                initialization.user_account.password: random_password.ubuntu_vm_password.result
                initialization.user_data_file_id: proxmox_virtual_environment_file.cloud_config.id
              dependencies:
                proxmox_virtual_environment_download_file.latest_ubuntu_22_jammy_qcow2_img: |-
                    {
                      "content_type": "import",
                      "datastore_id": "local",
                      "file_name": "jammy-server-cloudimg-amd64.qcow2",
                      "node_name": "pve",
                      "url": "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img"
                    }
                random_password.ubuntu_vm_password: |-
                    {
                      "length": 16,
                      "override_special": "_%@",
                      "special": true
                    }
                tls_private_key.ubuntu_vm_key: |-
                    {
                      "algorithm": "RSA",
                      "rsa_bits": 2048
                    }
            - name: ubuntu_vm
              manifest: |-
                {
                  "name": "terraform-provider-proxmox-ubuntu-vm",
                  "vm_id": 4321
                }
              dependencies:
                proxmox_virtual_environment_haresource.ubuntu_vm: |-
                    {
                      "comment": "Managed by Terraform",
                      "group": "node1",
                      "resource_id": "vm:${proxmox_virtual_environment_vm.ubuntu_vm.vm_id}",
                      "state": "started"
                    }
            - name: data_vm
              manifest: |-
                {
                  "disk": [
                    {
                      "datastore_id": "local-zfs",
                      "interface": "scsi0",
                      "size": 1
                    },
                    {
                      "datastore_id": "local-zfs",
                      "interface": "scsi1",
                      "size": 4
                    }
                  ],
                  "node_name": "first-node",
                  "on_boot": false,
                  "started": false
                }
            - name: data_user_vm
              manifest: |-
                {
                  "disk": [
                    {
                      "datastore_id": "local-zfs",
                      "interface": "scsi0",
                      "size": 8
                    }
                  ],
                  "dynamic": {
                    "disk": [
                      {
                        "content": [
                          {
                            "datastore_id": "${data_disk.value[\"datastore_id\"]}",
                            "file_format": "${data_disk.value[\"file_format\"]}",
                            "interface": "scsi${data_disk.key + 1}",
                            "path_in_datastore": "${data_disk.value[\"path_in_datastore\"]}",
                            "size": "${data_disk.value[\"size\"]}"
                          }
                        ],
                        "for_each": "${{ for idx, val in proxmox_virtual_environment_vm.data_vm.disk : idx =\u003e val }}",
                        "iterator": "${data_disk}"
                      }
                    ]
                  }
                }
              references:
                dynamic.content.datastore_id: data_disk.value["datastore_id"]
                dynamic.content.file_format: data_disk.value["file_format"]
                dynamic.content.path_in_datastore: data_disk.value["path_in_datastore"]
                dynamic.content.size: data_disk.value["size"]
                dynamic.iterator: data_disk
            - name: test_vm
              manifest: '{}'
        argumentDocs:
            +aes: /-aes - Activate AES instruction set for HW acceleration.
            +amd-no-ssb: |-
                /-amd-no-ssb - Notifies guest OS that host is not
                vulnerable for Spectre on AMD CPUs.
            +amd-ssbd: |-
                /-amd-ssbd - Improves Spectre mitigation performance with
                AMD CPUs, best used with "virt-ssbd".
            +hv-evmcs: |-
                /-hv-evmcs - Improve performance for nested
                virtualization (only supported on Intel CPUs).
            +hv-tlbflush: |-
                /-hv-tlbflush - Improve performance in overcommitted
                Windows guests (may lead to guest BSOD on old CPUs).
            +ibpb: /-ibpb - Allows improved Spectre mitigation on AMD CPUs.
            +md-clear: |-
                /-md-clear - Required to let the guest OS know if MDS is
                mitigated correctly.
            +pcid: |-
                /-pcid - Meltdown fix cost reduction on Westmere, Sandy- and
                Ivy Bridge Intel CPUs.
            +pdpe1gb: |-
                /-pdpe1gb - Allows guest OS to use 1 GB size pages, if
                host HW supports it.
            +spec-ctrl: |-
                /-spec-ctrl - Allows improved Spectre mitigation with
                Intel CPUs.
            +ssbd: |-
                /-ssbd - Protection for "Speculative Store Bypass" for Intel
                models.
            +virt-ssbd: |-
                /-virt-ssbd - Basis for "Speculative Store Bypass"
                protection for AMD models.
            /dev/*: '- A host serial device.'
            "2": '- 2MB hugepages.'
            "486": '- Intel 486.'
            "1024": '- 1GB hugepages.'
            AC97: '- Intel 82801AA AC97 Audio.'
            Broadwell: /Broadwell-IBRS/Broadwell-noTSX/Broadwell-noTSX-IBRS - Intel Core Processor (Broadwell, 2014).
            Cascadelake-Server: /Cascadelake-Server-noTSX/Cascadelake-Server-v2/Cascadelake-Server-v4/Cascadelake-Server-v5 - Intel Xeon 32xx/42xx/52xx/62xx/82xx/92xx (2019).
            Conroe: '- Intel Celeron_4x0 (Conroe/Merom Class Core 2, 2006).'
            Cooperlake: /Cooperlake-v2
            EPYC: |-
                /EPYC-Genoa/EPYC-IBPB/EPYC-Milan/EPYC-Rome/EPYC-Rome-v2/EPYC-v3/EPYC-v4/ -
                AMD EPYC Processor (2017).
            Haswell: |-
                /Haswell-IBRS/Haswell-noTSX/Haswell-noTSX-IBRS - Intel
                Core Processor (Haswell, 2013).
            Icelake-Client: /Icelake-Client-noTSX
            Icelake-Server: |-
                /Icelake-Server-noTSX/Icelake-Server-v3/
                Icelake-Server-v4/Icelake-Server-v5/Icelake-Server-v6
            IvyBridge: |-
                /IvyBridge-IBRS - Intel Xeon E3-12xx v2 (Ivy Bridge,
                2012).
            KnightsMill: '- Intel Xeon Phi 72xx (2017).'
            Nehalem: |-
                /Nehalem-IBRS - Intel Core i7 9xx (Nehalem Class Core i7,
                2008).
            Opteron_G1: '- AMD Opteron 240 (Gen 1 Class Opteron, 2004).'
            Opteron_G2: '- AMD Opteron 22xx (Gen 2 Class Opteron, 2006).'
            Opteron_G3: '- AMD Opteron 23xx (Gen 3 Class Opteron, 2009).'
            Opteron_G4: '- AMD Opteron 62xx class CPU (2011).'
            Opteron_G5: '- AMD Opteron 63xx class CPU (2012).'
            Penryn: '- Intel Core 2 Duo P9xxx (Penryn Class Core 2, 2007).'
            SandyBridge: |-
                /SandyBridge-IBRS - Intel Xeon E312xx (Sandy Bridge,
                2011).
            Skylake-Client: |-
                /Skylake-Client-IBRS/Skylake-Client-noTSX-IBRS/Skylake-Client-v4 -
                Intel Core Processor (Skylake, 2015).
            Skylake-Server: |-
                /Skylake-Server-IBRS/Skylake-Server-noTSX-IBRS/Skylake-Server-v4/Skylake-Server-v5 -
                Intel Xeon Processor (Skylake, 2016).
            Westmere: |-
                /Westmere-IBRS - Intel Westmere E56xx/L56xx/X56xx (
                Nehalem-C, 2010).
            aarch64: '- ARM (64 bit).'
            acpi: '- (Optional) Whether to enable ACPI (defaults to true).'
            action: '- (Optional) The action to perform if after activation the guest fails to poll the watchdog in time  (defaults to none).'
            address: |-
                - (Optional) The IPv4 address in CIDR notation
                (e.g. 192.168.2.2/24). Alternatively, set this to dhcp for
                autodiscovery.
            affinity: |-
                - (Optional) The CPU cores that are used to run the VM’s vCPU. The
                value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.
                For example, 0,1,2,3 (which also can be shortened to 0-3) means that the VM’s vCPUs are run on the first four
                CPU cores. Setting affinity is only allowed for root@pam authenticated user.
            agent: '- (Optional) The QEMU agent configuration.'
            allow_smt: |-
                - (Optional) Sets policy bit to allow Simultaneous Multi Threading (SMT)
                (Ignored unless for SEV-SNP) (defaults to true).
            amd_sev: '- (Optional) Secure Encrypted Virtualization (SEV) features by AMD CPUs.'
            any: '- Any hugepages.'
            architecture: '- (Optional) The CPU architecture (defaults to x86_64).'
            athlon: '- AMD Athlon.'
            audio_device: '- (Optional) An audio device.'
            bind: '- Only use the specified node.'
            bios: '- (Optional) The BIOS implementation (defaults to seabios).'
            boot_order: |-
                - (Optional) Specify a list of devices to boot from in the order
                they appear in the list (defaults to []).
            cache: '- (Optional) The caching mode'
            cdrom: '- (Optional) The CD-ROM configuration.'
            cirrus: '- Cirrus (deprecated since QEMU 2.2).'
            clipboard: '- (Optional) Enable VNC clipboard by setting to vnc. See the Proxmox documentation section 10.2.8 for more information.'
            clone: '- (Optional) The cloning configuration.'
            core2duo: '- Intel Core 2 Duo.'
            coreduo: '- Intel Core Duo.'
            cores: '- (Optional) The number of CPU cores (defaults to 1).'
            cpu: '- (Optional) The CPU configuration.'
            cpus: '- (Required) The CPU cores to assign to the NUMA node (format is 0-7;16-31).'
            custom-<model>: |-
                - Custom CPU model. All custom-<model> values
                should be defined in /etc/pve/virtual-guest/cpu-models.conf file.
            da: '- Danish.'
            datastore_id: '- (Optional) The identifier for the target datastore.'
            de: '- German.'
            de-ch: '- Swiss German.'
            dedicated: '- (Optional) The dedicated memory in megabytes (defaults to 512).'
            description: '- (Optional) The description.'
            device: '- (Optional) The device (defaults to intel-hda).'
            direct_io: '- (Optional) Whether to allow direct io'
            directsync: '- Write to the host cache and wait for completion.'
            disk: '- (Optional) A disk (multiple blocks supported).'
            disk.aio: '- (Optional) The disk AIO mode (defaults to io_uring).'
            disk.backup: '- (Optional) Whether the drive should be included when making backups (defaults to true).'
            disk.cache: '- (Optional) The cache type (defaults to none).'
            disk.datastore_id: |-
                - (Optional) The identifier for the datastore to create
                the disk in (defaults to local-lvm).
            disk.discard: |-
                - (Optional) Whether to pass discard/trim requests to the
                underlying storage. Supported values are on/ignore (defaults
                to ignore).
            disk.file_format: '- (Optional) The file format.'
            disk.file_id: |-
                - (Optional) The file ID for a disk image when importing a disk into VM. The ID format is
                <datastore_id>:<content_type>/<file_name>, for example local:iso/centos8.img. Can be also taken from
                proxmox_virtual_environment_download_file resource. Deprecated, use import_from instead.
            disk.import_from: |-
                - (Optional) The file ID for a disk image to import into VM. The image must be of import content type.
                The ID format is <datastore_id>:import/<file_name>, for example local:import/centos8.qcow2. Can be also taken from
                proxmox_virtual_environment_download_file resource.
            disk.interface: |-
                - (Required) The disk interface for Proxmox, currently scsi,
                sata and virtio interfaces are supported. Append the disk index at
                the end, for example, virtio0 for the first virtio disk, virtio1 for
                the second, etc.
            disk.iothread: |-
                - (Optional) Whether to use iothreads for this disk (defaults
                to false).
            disk.path_in_datastore: |-
                - (Optional) The in-datastore path to the disk image.
                ***Experimental.***Use to attach another VM's disks,
                or (as root only) host's filesystem paths (datastore_id empty string).
                See "Example: Attached disks".
            disk.replicate: '- (Optional) Whether the drive should be considered for replication jobs (defaults to true).'
            disk.serial: '- (Optional) The serial number of the disk, up to 20 bytes long.'
            disk.size: '- (Optional) The disk size in gigabytes (defaults to 8).'
            disk.speed: '- (Optional) The speed limits.'
            disk.ssd: |-
                - (Optional) Whether to use an SSD emulation option for this disk (
                defaults to false). Note that SSD emulation is not supported on VirtIO
                Block drives.
            dns: '- (Optional) The DNS configuration.'
            domain: '- (Optional) The DNS search domain.'
            down_delay: |-
                - (Optional) A non-negative number defining the delay in
                seconds before the next VM is shut down.
            driver: '- (Optional) The driver (defaults to spice).'
            e1000: '- Intel E1000.'
            e1000e: '- Intel E1000E.'
            efi_disk: |-
                - (Optional) The efi disk device (required if bios is set
                to ovmf)
            en-gb: '- British English.'
            en-us: '- American English.'
            enabled: |-
                - (Optional) Whether to enable the QEMU agent (defaults
                to false).
            es: '- Spanish.'
            expose_acl: '- (Optional) Enable POSIX ACLs, implies xattr support'
            expose_xattr: '- (Optional) Enable support for extended attributes'
            family: '- (Optional) The family string.'
            fi: '- Finnish.'
            file_format: (Optional) The file format (defaults to raw).
            file_id: |-
                - (Optional) A file ID for an ISO file (defaults to cdrom as
                in the physical drive). Use none to leave the CD-ROM drive empty.
            flags: '- (Optional) The CPU flags.'
            floating: |-
                - (Optional) The floating memory in megabytes. The default is 0, which disables "ballooning device" for the VM.
                Please note that Proxmox has ballooning enabled by default. To enable it, set floating to the same value as dedicated.
                See Proxmox documentation section 10.2.6 for more information.
            fr: '- French.'
            fr-be: '- Belgian French.'
            fr-ca: '- French Canadian.'
            fr-ch: '- Swish French.'
            full: '- (Optional) Full or linked clone (defaults to true).'
            gateway: |-
                - (Optional) The IPv4 gateway (must be omitted
                when dhcp is used as the address).
            hook_script_file_id: '- (Optional) The identifier for a file containing a hook script (needs to be executable, e.g. by using the proxmox_virtual_environment_file.file_mode attribute).'
            host: '- Host pass-through.'
            hostnodes: '- (Optional) The NUMA host nodes.'
            hostpci: '- (Optional) A host PCI device mapping (multiple blocks supported).'
            hostpci.device: |-
                - (Required) The PCI device name for Proxmox, in form
                of hostpciX where X is a sequential number from 0 to 15.
            hostpci.id: |-
                - (Optional) The PCI device ID. This parameter is not compatible
                with api_token and requires the root username and password
                configured in the proxmox provider. Use either this or mapping.
            hostpci.mapping: |-
                - (Optional) The resource mapping name of the device, for
                example gpu. Use either this or id.
            hostpci.mdev: '- (Optional) The mediated device ID to use.'
            hostpci.pcie: |-
                - (Optional) Tells Proxmox to use a PCIe or PCI port. Some
                guests/device combination require PCIe rather than PCI. PCIe is only
                available for q35 machine types.
            hostpci.rom_file: |-
                - (Optional) A path to a ROM file for the device to use. This
                is a relative path under /usr/share/kvm/.
            hostpci.rombar: |-
                - (Optional) Makes the firmware ROM visible for the VM (defaults
                to true).
            hostpci.xvga: |-
                - (Optional) Marks the PCI(e) device as the primary GPU of the VM.
                With this enabled the vga configuration argument will be ignored.
            hotplugged: |-
                - (Optional) The number of hotplugged vCPUs (defaults
                to 0).
            hu: '- Hungarian.'
            hugepages: '- (Optional) Enable/disable hugepages memory (defaults to disable).'
            i6300esb: '- Intel 6300ESB.'
            ib700: '- iBase IB700.'
            ich9-intel-hda: '- Intel HD Audio Controller (ich9).'
            initialization: '- (Optional) The cloud-init configuration.'
            intel-hda: '- Intel HD Audio.'
            interface: |-
                - (Optional) A hardware interface to connect CD-ROM drive to (defaults to ide3).
                "Must be one of ideN, sataN, scsiN, where N is the index of the interface. " +
                "Note that q35 machine type only supports ide0 and ide2 of IDE interfaces.
            interleave: '- Interleave memory across nodes.'
            io_uring: '- Use io_uring.'
            iops_read: '- (Optional) The maximum read I/O in operations per second.'
            iops_read_burstable: '- (Optional) The maximum unthrottled read I/O pool in operations per second.'
            iops_write: '- (Optional) The maximum write I/O in operations per second.'
            iops_write_burstable: '- (Optional) The maximum unthrottled write I/O pool in operations per second.'
            ip_config: |-
                - (Optional) The IP configuration (one block per network
                device).
            ipv4: '- (Optional) The IPv4 configuration.'
            ipv4_addresses: |-
                - The IPv4 addresses per network interface published by the
                QEMU agent (empty list when agent.enabled is false)
            ipv6: '- (Optional) The IPv6 configuration.'
            ipv6_addresses: |-
                - The IPv6 addresses per network interface published by the
                QEMU agent (empty list when agent.enabled is false)
            is: '- Icelandic.'
            isa: '- ISA Serial Port.'
            it: '- Italian.'
            ja: '- Japanese.'
            keep_hugepages: '- (Optional) Keep hugepages memory after the VM is stopped (defaults to false).'
            kernel_hashes: '- (Optional) Add kernel hashes to guest firmware for measured linux kernel launch (defaults to false).'
            keyboard_layout: '- (Optional) The keyboard layout (defaults to en-us).'
            keys: '- (Optional) The SSH keys.'
            kvm_arguments: '- (Optional) Arbitrary arguments passed to kvm.'
            kvm32: /kvm64 - Common KVM processor (32 & 64 bit variants).
            l24: '- Linux Kernel 2.4.'
            l26: '- Linux Kernel 2.6 - 5.X.'
            limit: '- (Optional) Limit of CPU usage, 0...128. (defaults to 0 -- no limit).'
            lsi: '- LSI Logic SAS1068E.'
            lsi53c810: '- LSI Logic 53C810.'
            lt: '- Lithuanian.'
            mac_addresses: |-
                - The MAC addresses published by the QEMU agent with fallback
                to the network device configuration, if the agent is disabled
            machine: '- (Optional) The VM machine type (defaults to pc).'
            manufacturer: '- (Optional) The manufacturer.'
            mapping: '- Identifier of the directory mapping'
            max: '- Maximum amount of features from host CPU.'
            max_bytes: '- (Optional) Maximum bytes of entropy allowed to get injected into the guest every period milliseconds (defaults to 1024). Prefer a lower value when using /dev/random as source.'
            megasas: '- LSI Logic MegaRAID SAS.'
            memory: '- (Optional) The memory configuration.'
            meta_data_file_id: |-
                - (Optional) The identifier for a file containing
                all meta data passed to the VM via cloud-init.
            migrate: |-
                - (Optional) Migrate the VM on node change instead of re-creating
                it (defaults to false).
            mk: '- Macedonian.'
            model: '- (Optional) The watchdog type to emulate (defaults to i6300esb).'
            name: '- (Optional) The virtual machine name.'
            native: |-
                - Use native AIO. Should be used with to unbuffered, O_DIRECT, raw block storage only,
                with the disk cache must be set to none. Raw block storage types include iSCSI, CEPH/RBD, and NVMe.
            network_data_file_id: |-
                - (Optional) The identifier for a file containing
                network configuration data passed to the VM via cloud-init (conflicts
                with ip_config).
            network_device: '- (Optional) A network device (multiple blocks supported).'
            network_device.bridge: '- (Optional) The name of the network bridge (defaults to vmbr0).'
            network_device.disconnected: '- (Optional) Whether to disconnect the network device from the network (defaults to false).'
            network_device.enabled: '- (Optional) Whether to enable the network device (defaults to true).'
            network_device.firewall: '- (Optional) Whether this interface''s firewall rules should be used (defaults to false).'
            network_device.mac_address: '- (Optional) The MAC address.'
            network_device.model: '- (Optional) The network device model (defaults to virtio).'
            network_device.mtu: '- (Optional) Force MTU, for VirtIO only. Set to 1 to use the bridge MTU. Cannot be larger than the bridge MTU.'
            network_device.queues: '- (Optional) The number of queues for VirtIO (1..64).'
            network_device.rate_limit: '- (Optional) The rate limit in megabytes per second.'
            network_device.trunks: |-
                - (Optional) String containing a ; separated list of VLAN trunks
                ("10;20;30"). Note that the VLAN-aware feature need to be enabled on the PVE
                Linux Bridge to use trunks.
            network_device.vlan_id: '- (Optional) The VLAN identifier.'
            network_interface_names: |-
                - The network interface names published by the QEMU
                agent (empty list when agent.enabled is false)
            nl: '- Dutch.'
            "no": '- Norwegian.'
            no_debug: |-
                - (Optional) Sets policy bit to disallow debugging of guest (defaults
                to false).
            no_key_sharing: '- (Optional) Sets policy bit to disallow key sharing with other guests (Ignored for SEV-SNP) (defaults to false).'
            node_name: |-
                - (Optional) The name of the source node (leave blank, if
                equal to the node_name argument).
            none: '- No cache.'
            numa: '- (Boolean) Enable/disable NUMA. (default to false)'
            on_boot: |-
                - (Optional) Specifies whether a VM will be started during system
                boot. (defaults to true)
            operating_system: '- (Optional) The Operating System configuration.'
            order: |-
                - (Required) A non-negative number defining the general startup
                order.
            other: '- Unspecified OS.'
            ovmf: '- OVMF (UEFI).'
            password: '- (Optional) The SSH password.'
            pc: '- Standard PC (i440FX + PIIX, 1996).'
            pentium: '- Intel Pentium (1993).'
            pentium2: '- Intel Pentium 2 (1997-1999).'
            pentium3: '- Intel Pentium 3 (1999-2001).'
            period: '- (Optional) Every period milliseconds the entropy-injection quota is reset, allowing the guest to retrieve another max_bytes of entropy (defaults to 1000).'
            phenom: '- AMD Phenom (2010).'
            pl: '- Polish.'
            policy: '- (Optional) The NUMA policy (defaults to preferred).'
            pool_id: '- (Optional) The identifier for a pool to assign the virtual machine to.'
            pre_enrolled_keys: |-
                (Optional) Use am EFI vars template with
                distribution-specific and Microsoft Standard keys enrolled, if used with
                EFI type=4m. Ignored for VMs with cpu.architecture=aarch64 (defaults
                to false).
            preferred: '- Prefer the specified node.'
            product: '- (Optional) The product ID.'
            protection: '- (Optional) Sets the protection flag of the VM. This will disable the remove VM and remove disk operations (defaults to false).'
            pt: '- Portuguese.'
            pt-br: '- Brazilian Portuguese.'
            pvscsi: '- VMware Paravirtual SCSI.'
            q35: '- Standard PC (Q35 + ICH9, 2009). Optionally, you can enable VIOMMU by adding viommu=virtio|intel to the value, for example q35,viommu=virtio.'
            qcow2: '- QEMU Disk Image v2.'
            qemu32: |-
                /qemu64 - QEMU Virtual CPU version 2.5+ (32 & 64 bit
                variants).
            qxl: '- SPICE.'
            qxl2: '- SPICE Dual Monitor.'
            qxl3: '- SPICE Triple Monitor.'
            qxl4: '- SPICE Quad Monitor.'
            raw: '- Raw Disk Image.'
            read: '- (Optional) The maximum read speed in megabytes per second.'
            read_burstable: |-
                - (Optional) The maximum burstable read speed in
                megabytes per second.
            reboot: '- (Optional) Reboot the VM after initial creation (defaults to false).'
            reboot_after_update: '- (Optional) Reboot the VM after update if needed (defaults to true).'
            retries: |-
                - (Optional) Number of retries in Proxmox for clone vm.
                Sometimes Proxmox errors with timeout when creating multiple clones at
                once.
            rng: '- (Optional) The random number generator configuration. Can only be set by root@pam.'
            rtl8139: '- Realtek RTL8139.'
            scsi_hardware: |-
                - (Optional) The SCSI hardware type (defaults to
                virtio-scsi-pci).
            seabios: '- SeaBIOS.'
            serial: '- (Optional) The serial number.'
            serial_device: '- (Optional) A serial device (multiple blocks supported).'
            serial_device.device: '- (Optional) The device (defaults to socket).'
            serial0: '- Serial Terminal 0.'
            serial1: '- Serial Terminal 1.'
            serial2: '- Serial Terminal 2.'
            serial3: '- Serial Terminal 3.'
            server: |-
                - (Optional) The DNS server. The server attribute is
                deprecated and will be removed in a future release. Please use the
                servers attribute instead.
            servers: '- (Optional) The list of DNS servers.'
            shared: '- (Optional) The shared memory in megabytes (defaults to 0).'
            sku: '- (Optional) The SKU number.'
            sl: '- Slovenian.'
            smbios: '- (Optional) The SMBIOS (type1) settings for the VM.'
            socket: '- A unix socket.'
            sockets: '- (Optional) The number of CPU sockets (defaults to 1).'
            solaris: '- OpenIndiania, OpenSolaris og Solaris Kernel.'
            source: '- The file on the host to gather entropy from. In most cases, /dev/urandom should be preferred over /dev/random to avoid entropy-starvation issues on the host.'
            spice: '- Spice.'
            started: |-
                - (Optional) Whether to start the virtual machine (defaults
                to true).
            startup: '- (Optional) Defines startup and shutdown behavior of the VM.'
            std: '- Standard VGA.'
            stop_on_destroy: '- (Optional) Whether to stop rather than shutdown on VM destroy (defaults to false)'
            sv: '- Swedish.'
            tablet_device: |-
                - (Optional) Whether to enable the USB tablet device (defaults
                to true).
            tags: |-
                - (Optional) A list of tags of the VM. This is only meta information (
                defaults to []). Note: Proxmox always sorts the VM tags. If the list in
                template is not sorted, then Proxmox will always report a difference on the
                resource. You may use the ignore_changes lifecycle meta-argument to ignore
                changes to this attribute.
            template: '- (Optional) Whether to create a template (defaults to false).'
            threads: '- Use thread-based AIO.'
            timeout: |-
                - (Optional) The maximum amount of time to wait for data from
                the QEMU agent to become available ( defaults to 15m).
            timeout_clone: |-
                - (Optional) Timeout for cloning a VM in seconds (defaults to
                1800).
            timeout_create: |-
                - (Optional) Timeout for creating a VM in seconds (defaults to
                1800).
            timeout_migrate: |-
                - (Optional) Timeout for migrating the VM (defaults to
                1800).
            timeout_reboot: |-
                - (Optional) Timeout for rebooting a VM in seconds (defaults
                to 1800).
            timeout_shutdown_vm: |-
                - (Optional) Timeout for shutting down a VM in seconds (
                defaults to 1800).
            timeout_start_vm: |-
                - (Optional) Timeout for starting a VM in seconds (defaults
                to 1800).
            timeout_stop_vm: |-
                - (Optional) Timeout for stopping a VM in seconds (defaults
                to 300).
            tpm_state: '- (Optional) The TPM state device.'
            tr: '- Turkish.'
            trim: |-
                - (Optional) Whether to enable the FSTRIM feature in the QEMU agent
                (defaults to false).
            type: '- (Optional) The QEMU agent interface type (defaults to virtio).'
            units: '- (Optional) The CPU units (defaults to 1024).'
            unsafe: '- Write directly to the disk bypassing the host cache.'
            up_delay: |-
                - (Optional) A non-negative number defining the delay in
                seconds before the next VM is started.
            usb: '- (Optional) A host USB device mapping (multiple blocks supported).'
            usb.host: '- (Optional) The Host USB device or port or the value spice. Use either this or mapping.'
            usb.mapping: '- (Optional) The cluster-wide resource mapping name of the device, for example "usbdevice". Use either this or host.'
            usb.usb3: |-
                - (Optional) Makes the USB device a USB3 device for the VM
                (defaults to false).
            user_account: |-
                - (Optional) The user account configuration (conflicts
                with user_data_file_id).
            user_data_file_id: |-
                - (Optional) The identifier for a file containing
                custom user data (conflicts with user_account).
            username: '- (Optional) The SSH username.'
            uuid: '- (Optional) The UUID (defaults to randomly generated UUID).'
            vendor_data_file_id: |-
                - (Optional) The identifier for a file containing
                all vendor data passed to the VM via cloud-init.
            version: |-
                (Optional) TPM state device version. Can be v1.2 or v2.0.
                (defaults to v2.0).
            vga: '- (Optional) The VGA configuration.'
            virtio: '- VirtIO (paravirtualized).'
            virtio-gl: '- VirtIO-GPU with 3D acceleration (VirGL). VirGL support needs some extra libraries that aren’t installed by default. See the Proxmox documentation section 10.2.8 for more information.'
            virtio-scsi-pci: '- VirtIO SCSI.'
            virtio-scsi-single: '- VirtIO SCSI (single queue).'
            virtiofs: '- (Optional) Virtiofs share'
            vm_id: '- (Required) The identifier for the source VM.'
            vmdk: '- VMware Disk Image.'
            vmware: '- VMware Compatible.'
            vmxnet3: '- VMware vmxnet3.'
            w2k: '- Windows 2000.'
            w2k3: '- Windows 2003.'
            w2k8: '- Windows 2008.'
            watchdog: '- (Optional) The watchdog configuration. Once enabled (by a guest action), the watchdog must be periodically polled by an agent inside the guest or else the watchdog will reset the guest (or execute the respective action specified).'
            win7: '- Windows 7.'
            win8: '- Windows 8, 2012 or 2012 R2.'
            win10: '- Windows 10 or 2016.'
            win11: '- Windows 11'
            write: '- (Optional) The maximum write speed in megabytes per second.'
            write_burstable: |-
                - (Optional) The maximum burstable write speed in
                megabytes per second.
            writeback: |-
                - Write to the host cache, but write back to the
                guest when possible.
            writethrough: |-
                - Write to the host cache, but write through to
                the guest.
            wvista: '- Windows Vista.'
            wxp: '- Windows XP.'
            x86-64-v2: |-
                /x86-64-v2-AES/x86-64-v3/x86-64-v4
                See https://en.wikipedia.org/wiki/X86-64#Microarchitecture_levels
            x86_64: '- x86 (64-bit).'
        importStatements: []
    proxmox_virtual_environment_vm2:
        subCategory: Virtual Environment
        description: This is an experimental implementation of a Proxmox VM resource using Plugin Framework.It is a Proof of Concept, highly experimental and will change in future. It does not support all features of the Proxmox API for VMs and MUST NOT be used in production.
        name: proxmox_virtual_environment_vm2
        title: proxmox_virtual_environment_vm2
        argumentDocs:
            affinity: (String) The CPU cores that are used to run the VM’s vCPU. The value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.  For example, 0,1,2,3 (which also can be shortened to 0-3) means that the VM’s vCPUs are run on the first four CPU cores. Setting affinity is only allowed for root@pam authenticated user.
            architecture: (String) The CPU architecture <aarch64 | x86_64> (defaults to the host). Setting affinity is only allowed for root@pam authenticated user.
            cdrom: (Attributes Map) The CD-ROM configuration. The key is the interface of the CD-ROM, could be one of ideN, sataN, scsiN, where N is the index of the interface. Note that q35 machine type only supports ide0 and ide2 of IDE interfaces. (see below for nested schema)
            clipboard: (String) Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Currently only vnc is available. Migration with VNC clipboard is not supported by Proxmox.
            clone: (Attributes) The cloning configuration. (see below for nested schema)
            cores: (Number) The number of CPU cores per socket (defaults to 1).
            cpu: (Attributes) The CPU configuration. (see below for nested schema)
            create: (String) A string that can be parsed as a duration consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
            delete: (String) A string that can be parsed as a duration consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
            description: (String) The description of the VM.
            file_id: (String) The file ID of the CD-ROM, or cdrom|none. Defaults to none to leave the CD-ROM empty. Use cdrom to connect to the physical drive.
            flags: '(Set of String) Set of additional CPU flags. Use +FLAG to enable, -FLAG to disable a flag. Custom CPU models can specify any flag supported by QEMU/KVM, VM-specific flags must be from the following set for security reasons: pcid, spec-ctrl, ibpb, ssbd, virt-ssbd, amd-ssbd, amd-no-ssb, pdpe1gb, md-clear, hv-tlbflush, hv-evmcs, aes.'
            hotplugged: (Number) The number of hotplugged vCPUs (defaults to 0).
            id: (Number) The unique identifier of the VM in the Proxmox cluster.
            limit: (Number) Limit of CPU usage (defaults to 0 which means no limit).
            max_bytes: (Number) Maximum bytes of entropy allowed to get injected into the guest every period. Use 0 to disable limiting (potentially dangerous).
            memory: (Number) The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
            name: (String) The name of the VM. Doesn't have to be unique.
            node_name: (String) The name of the node where the VM is provisioned.
            numa: (Boolean) Enable NUMA (defaults to false).
            period: (Number) Period in milliseconds to limit entropy injection to the guest. Use 0 to disable limiting (potentially dangerous).
            read: (String) A string that can be parsed as a duration consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
            retries: '(Number) The number of retries to perform when cloning the VM (default: 3).'
            rng: (Attributes) Configure the RNG (Random Number Generator) device. The RNG device provides entropy to guests to ensure good quality random numbers for guest applications that require them. Can only be set by root@pam.See the Proxmox documentation for more information. (see below for nested schema)
            sockets: (Number) The number of CPU sockets (defaults to 1).
            source: (String) The file on the host to gather entropy from. In most cases, /dev/urandom should be preferred over /dev/random to avoid entropy-starvation issues on the host.
            stop_on_destroy: (Boolean) Set to true to stop (rather than shutdown) the VM on destroy (defaults to false).
            tags: (Set of String) The tags assigned to the VM.
            template: (Boolean) Set to true to create a VM template.
            timeouts: (Attributes) (see below for nested schema)
            type: (String) Emulated CPU type, it's recommended to use x86-64-v2-AES or higher (defaults to kvm64). See https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings for more information.
            units: (Number) CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.
            update: (String) A string that can be parsed as a duration consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
            vga: (Attributes) Configure the VGA Hardware. If you want to use high resolution modes (>= 1280x1024x16) you may need to increase the vga memory option. Since QEMU 2.9 the default VGA display type is std for all OS types besides some Windows versions (XP and older) which use cirrus. The qxl option enables the SPICE display server. For win* OS you can select how many independent displays you want, Linux guests can add displays themself. You can also run without any graphic card, using a serial device as terminal. See the Proxmox documentation section 10.2.8 for more information and available configuration parameters. (see below for nested schema)
        importStatements: []
