// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentCertificateInitParameters struct {

	// The PEM encoded certificate.
	// The PEM encoded certificate
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// The PEM encoded certificate chain.
	// The PEM encoded certificate chain
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// A node name.
	// The node name
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// Whether to overwrite an existing certificate
	Overwrite *bool `json:"overwrite,omitempty" tf:"overwrite,omitempty"`

	// The PEM encoded private key.
	// The PEM encoded private key
	PrivateKeySecretRef v1.SecretKeySelector `json:"privateKeySecretRef" tf:"-"`
}

type EnvironmentCertificateObservation struct {

	// The PEM encoded certificate.
	// The PEM encoded certificate
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// The PEM encoded certificate chain.
	// The PEM encoded certificate chain
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// The expiration date (RFC 3339).
	// The expiration date
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	// The file name.
	// The file name
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The issuer.
	// The issuer
	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// A node name.
	// The node name
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// Whether to overwrite an existing certificate
	Overwrite *bool `json:"overwrite,omitempty" tf:"overwrite,omitempty"`

	// The public key size.
	// The public key size
	PublicKeySize *float64 `json:"publicKeySize,omitempty" tf:"public_key_size,omitempty"`

	// The public key type.
	// The public key type
	PublicKeyType *string `json:"publicKeyType,omitempty" tf:"public_key_type,omitempty"`

	// The SSL fingerprint.
	// The SSL fingerprint
	SSLFingerprint *string `json:"sslFingerprint,omitempty" tf:"ssl_fingerprint,omitempty"`

	// The start date (RFC 3339).
	// The start date
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	// The subject.
	// The subject
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	// The subject alternative names.
	// The subject alternative names
	SubjectAlternativeNames []*string `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`
}

type EnvironmentCertificateParameters struct {

	// The PEM encoded certificate.
	// The PEM encoded certificate
	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// The PEM encoded certificate chain.
	// The PEM encoded certificate chain
	// +kubebuilder:validation:Optional
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// A node name.
	// The node name
	// +kubebuilder:validation:Optional
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// Whether to overwrite an existing certificate
	// +kubebuilder:validation:Optional
	Overwrite *bool `json:"overwrite,omitempty" tf:"overwrite,omitempty"`

	// The PEM encoded private key.
	// The PEM encoded private key
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef v1.SecretKeySelector `json:"privateKeySecretRef" tf:"-"`
}

// EnvironmentCertificateSpec defines the desired state of EnvironmentCertificate
type EnvironmentCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentCertificateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentCertificateInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentCertificateStatus defines the observed state of EnvironmentCertificate.
type EnvironmentCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentCertificate is the Schema for the EnvironmentCertificates API. |  Manages the custom SSL/TLS certificate for a specific node.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmoxbpg}
type EnvironmentCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certificate) || (has(self.initProvider) && has(self.initProvider.certificate))",message="spec.forProvider.certificate is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeName) || (has(self.initProvider) && has(self.initProvider.nodeName))",message="spec.forProvider.nodeName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.privateKeySecretRef)",message="spec.forProvider.privateKeySecretRef is a required parameter"
	Spec   EnvironmentCertificateSpec   `json:"spec"`
	Status EnvironmentCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentCertificateList contains a list of EnvironmentCertificates
type EnvironmentCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentCertificate `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentCertificate_Kind             = "EnvironmentCertificate"
	EnvironmentCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentCertificate_Kind}.String()
	EnvironmentCertificate_KindAPIVersion   = EnvironmentCertificate_Kind + "." + CRDGroupVersion.String()
	EnvironmentCertificate_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentCertificate{}, &EnvironmentCertificateList{})
}
