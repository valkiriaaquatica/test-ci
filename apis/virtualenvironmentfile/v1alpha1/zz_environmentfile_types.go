// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentFileInitParameters struct {

	// The content type. If not specified, the content
	// type will be inferred from the file extension. Valid values are:
	// The content type
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// The datastore id.
	// The datastore id
	DatastoreID *string `json:"datastoreId,omitempty" tf:"datastore_id,omitempty"`

	// The file mode in octal format, e.g. 0700 or 600. Note that the prefixes 0o and 0x is not supported! Setting this attribute is also only allowed for root@pam authenticated user.
	// The file mode in octal format, e.g. "0700" or "600".Note that the prefixes "0o" and "0x" are not supported!Setting this attribute is also only allowed for "root@pam" authenticated user.
	FileMode *string `json:"fileMode,omitempty" tf:"file_mode,omitempty"`

	// The node name.
	// The node name
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// Whether to overwrite an existing file (defaults to
	// true).
	// Whether to overwrite the file if it already exists
	Overwrite *bool `json:"overwrite,omitempty" tf:"overwrite,omitempty"`

	// The source file (conflicts with source_raw),
	// could be a local file or a URL. If the source file is a URL, the file will
	// be downloaded and stored locally before uploading it to Proxmox VE.
	// The source file
	SourceFile []SourceFileInitParameters `json:"sourceFile,omitempty" tf:"source_file,omitempty"`

	// The raw source (conflicts with source_file).
	// The raw source
	SourceRaw []SourceRawInitParameters `json:"sourceRaw,omitempty" tf:"source_raw,omitempty"`

	// Timeout for uploading ISO/VSTMPL files in
	// seconds (defaults to 1800).
	// Timeout for uploading ISO/VSTMPL files in seconds
	TimeoutUpload *float64 `json:"timeoutUpload,omitempty" tf:"timeout_upload,omitempty"`
}

type EnvironmentFileObservation struct {

	// The content type. If not specified, the content
	// type will be inferred from the file extension. Valid values are:
	// The content type
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// The datastore id.
	// The datastore id
	DatastoreID *string `json:"datastoreId,omitempty" tf:"datastore_id,omitempty"`

	// The file mode in octal format, e.g. 0700 or 600. Note that the prefixes 0o and 0x is not supported! Setting this attribute is also only allowed for root@pam authenticated user.
	// The file mode in octal format, e.g. "0700" or "600".Note that the prefixes "0o" and "0x" are not supported!Setting this attribute is also only allowed for "root@pam" authenticated user.
	FileMode *string `json:"fileMode,omitempty" tf:"file_mode,omitempty"`

	// The file modification date (RFC 3339).
	// The file modification date
	FileModificationDate *string `json:"fileModificationDate,omitempty" tf:"file_modification_date,omitempty"`

	// The file name to use instead of the source file
	// name. Useful when the source file does not have a valid file extension,
	// for example when the source file is a URL referencing a .qcow2 image.
	// The file name
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	// The file size in bytes.
	// The file size in bytes
	FileSize *float64 `json:"fileSize,omitempty" tf:"file_size,omitempty"`

	// The file tag.
	// The file tag
	FileTag *string `json:"fileTag,omitempty" tf:"file_tag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The node name.
	// The node name
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// Whether to overwrite an existing file (defaults to
	// true).
	// Whether to overwrite the file if it already exists
	Overwrite *bool `json:"overwrite,omitempty" tf:"overwrite,omitempty"`

	// The source file (conflicts with source_raw),
	// could be a local file or a URL. If the source file is a URL, the file will
	// be downloaded and stored locally before uploading it to Proxmox VE.
	// The source file
	SourceFile []SourceFileObservation `json:"sourceFile,omitempty" tf:"source_file,omitempty"`

	// The raw source (conflicts with source_file).
	// The raw source
	SourceRaw []SourceRawObservation `json:"sourceRaw,omitempty" tf:"source_raw,omitempty"`

	// Timeout for uploading ISO/VSTMPL files in
	// seconds (defaults to 1800).
	// Timeout for uploading ISO/VSTMPL files in seconds
	TimeoutUpload *float64 `json:"timeoutUpload,omitempty" tf:"timeout_upload,omitempty"`
}

type EnvironmentFileParameters struct {

	// The content type. If not specified, the content
	// type will be inferred from the file extension. Valid values are:
	// The content type
	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// The datastore id.
	// The datastore id
	// +kubebuilder:validation:Optional
	DatastoreID *string `json:"datastoreId,omitempty" tf:"datastore_id,omitempty"`

	// The file mode in octal format, e.g. 0700 or 600. Note that the prefixes 0o and 0x is not supported! Setting this attribute is also only allowed for root@pam authenticated user.
	// The file mode in octal format, e.g. "0700" or "600".Note that the prefixes "0o" and "0x" are not supported!Setting this attribute is also only allowed for "root@pam" authenticated user.
	// +kubebuilder:validation:Optional
	FileMode *string `json:"fileMode,omitempty" tf:"file_mode,omitempty"`

	// The node name.
	// The node name
	// +kubebuilder:validation:Optional
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// Whether to overwrite an existing file (defaults to
	// true).
	// Whether to overwrite the file if it already exists
	// +kubebuilder:validation:Optional
	Overwrite *bool `json:"overwrite,omitempty" tf:"overwrite,omitempty"`

	// The source file (conflicts with source_raw),
	// could be a local file or a URL. If the source file is a URL, the file will
	// be downloaded and stored locally before uploading it to Proxmox VE.
	// The source file
	// +kubebuilder:validation:Optional
	SourceFile []SourceFileParameters `json:"sourceFile,omitempty" tf:"source_file,omitempty"`

	// The raw source (conflicts with source_file).
	// The raw source
	// +kubebuilder:validation:Optional
	SourceRaw []SourceRawParameters `json:"sourceRaw,omitempty" tf:"source_raw,omitempty"`

	// Timeout for uploading ISO/VSTMPL files in
	// seconds (defaults to 1800).
	// Timeout for uploading ISO/VSTMPL files in seconds
	// +kubebuilder:validation:Optional
	TimeoutUpload *float64 `json:"timeoutUpload,omitempty" tf:"timeout_upload,omitempty"`
}

type SourceFileInitParameters struct {

	// Whether the source file has changed since the last run
	Changed *bool `json:"changed,omitempty" tf:"changed,omitempty"`

	// The SHA256 checksum of the source file.
	// The SHA256 checksum of the source file
	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	// The file name to use instead of the source file
	// name. Useful when the source file does not have a valid file extension,
	// for example when the source file is a URL referencing a .qcow2 image.
	// The file name to use instead of the source file name
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	// Whether to skip the TLS verification step for
	// HTTPS sources (defaults to false).
	// Whether to skip the TLS verification step for HTTPS sources
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// The minimum required TLS version for HTTPS
	// sources. "Supported values: 1.0|1.1|1.2|1.3 (defaults to 1.3).
	// The minimum required TLS version for HTTPS sources.Supported values: `1.0|1.1|1.2|1.3`. Defaults to `1.3`.
	MinTLS *string `json:"minTls,omitempty" tf:"min_tls,omitempty"`

	// A path to a local file or a URL.
	// A path to a local file or a URL
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type SourceFileObservation struct {

	// Whether the source file has changed since the last run
	Changed *bool `json:"changed,omitempty" tf:"changed,omitempty"`

	// The SHA256 checksum of the source file.
	// The SHA256 checksum of the source file
	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	// The file name to use instead of the source file
	// name. Useful when the source file does not have a valid file extension,
	// for example when the source file is a URL referencing a .qcow2 image.
	// The file name to use instead of the source file name
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	// Whether to skip the TLS verification step for
	// HTTPS sources (defaults to false).
	// Whether to skip the TLS verification step for HTTPS sources
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// The minimum required TLS version for HTTPS
	// sources. "Supported values: 1.0|1.1|1.2|1.3 (defaults to 1.3).
	// The minimum required TLS version for HTTPS sources.Supported values: `1.0|1.1|1.2|1.3`. Defaults to `1.3`.
	MinTLS *string `json:"minTls,omitempty" tf:"min_tls,omitempty"`

	// A path to a local file or a URL.
	// A path to a local file or a URL
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type SourceFileParameters struct {

	// Whether the source file has changed since the last run
	// +kubebuilder:validation:Optional
	Changed *bool `json:"changed,omitempty" tf:"changed,omitempty"`

	// The SHA256 checksum of the source file.
	// The SHA256 checksum of the source file
	// +kubebuilder:validation:Optional
	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	// The file name to use instead of the source file
	// name. Useful when the source file does not have a valid file extension,
	// for example when the source file is a URL referencing a .qcow2 image.
	// The file name to use instead of the source file name
	// +kubebuilder:validation:Optional
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	// Whether to skip the TLS verification step for
	// HTTPS sources (defaults to false).
	// Whether to skip the TLS verification step for HTTPS sources
	// +kubebuilder:validation:Optional
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// The minimum required TLS version for HTTPS
	// sources. "Supported values: 1.0|1.1|1.2|1.3 (defaults to 1.3).
	// The minimum required TLS version for HTTPS sources.Supported values: `1.0|1.1|1.2|1.3`. Defaults to `1.3`.
	// +kubebuilder:validation:Optional
	MinTLS *string `json:"minTls,omitempty" tf:"min_tls,omitempty"`

	// A path to a local file or a URL.
	// A path to a local file or a URL
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`
}

type SourceRawInitParameters struct {

	// The raw data.
	// The raw data
	Data *string `json:"data,omitempty" tf:"data,omitempty"`

	// The file name to use instead of the source file
	// name. Useful when the source file does not have a valid file extension,
	// for example when the source file is a URL referencing a .qcow2 image.
	// The file name
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	// The number of bytes to resize the file to.
	// The number of bytes to resize the file to
	Resize *float64 `json:"resize,omitempty" tf:"resize,omitempty"`
}

type SourceRawObservation struct {

	// The raw data.
	// The raw data
	Data *string `json:"data,omitempty" tf:"data,omitempty"`

	// The file name to use instead of the source file
	// name. Useful when the source file does not have a valid file extension,
	// for example when the source file is a URL referencing a .qcow2 image.
	// The file name
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	// The number of bytes to resize the file to.
	// The number of bytes to resize the file to
	Resize *float64 `json:"resize,omitempty" tf:"resize,omitempty"`
}

type SourceRawParameters struct {

	// The raw data.
	// The raw data
	// +kubebuilder:validation:Optional
	Data *string `json:"data" tf:"data,omitempty"`

	// The file name to use instead of the source file
	// name. Useful when the source file does not have a valid file extension,
	// for example when the source file is a URL referencing a .qcow2 image.
	// The file name
	// +kubebuilder:validation:Optional
	FileName *string `json:"fileName" tf:"file_name,omitempty"`

	// The number of bytes to resize the file to.
	// The number of bytes to resize the file to
	// +kubebuilder:validation:Optional
	Resize *float64 `json:"resize,omitempty" tf:"resize,omitempty"`
}

// EnvironmentFileSpec defines the desired state of EnvironmentFile
type EnvironmentFileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentFileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentFileInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentFileStatus defines the observed state of EnvironmentFile.
type EnvironmentFileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentFileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentFile is the Schema for the EnvironmentFiles API. |  Use this resource to upload files to a Proxmox VE node. The file can be a backup, an ISO image, a snippet, or a container template depending on the content_type attribute.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmoxbpg}
type EnvironmentFile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.datastoreId) || (has(self.initProvider) && has(self.initProvider.datastoreId))",message="spec.forProvider.datastoreId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeName) || (has(self.initProvider) && has(self.initProvider.nodeName))",message="spec.forProvider.nodeName is a required parameter"
	Spec   EnvironmentFileSpec   `json:"spec"`
	Status EnvironmentFileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentFileList contains a list of EnvironmentFiles
type EnvironmentFileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentFile `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentFile_Kind             = "EnvironmentFile"
	EnvironmentFile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentFile_Kind}.String()
	EnvironmentFile_KindAPIVersion   = EnvironmentFile_Kind + "." + CRDGroupVersion.String()
	EnvironmentFile_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentFile_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentFile{}, &EnvironmentFileList{})
}
