// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentDNSInitParameters struct {

	// The DNS search domain.
	// The DNS search domain
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// A node name.
	// The node name
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// The DNS servers.
	// The DNS servers
	Servers []*string `json:"servers,omitempty" tf:"servers,omitempty"`
}

type EnvironmentDNSObservation struct {

	// The DNS search domain.
	// The DNS search domain
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A node name.
	// The node name
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// The DNS servers.
	// The DNS servers
	Servers []*string `json:"servers,omitempty" tf:"servers,omitempty"`
}

type EnvironmentDNSParameters struct {

	// The DNS search domain.
	// The DNS search domain
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// A node name.
	// The node name
	// +kubebuilder:validation:Optional
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// The DNS servers.
	// The DNS servers
	// +kubebuilder:validation:Optional
	Servers []*string `json:"servers,omitempty" tf:"servers,omitempty"`
}

// EnvironmentDNSSpec defines the desired state of EnvironmentDNS
type EnvironmentDNSSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentDNSParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentDNSInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentDNSStatus defines the observed state of EnvironmentDNS.
type EnvironmentDNSStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentDNSObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentDNS is the Schema for the EnvironmentDNSs API. |  Manages the DNS configuration for a specific node.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmoxbpg}
type EnvironmentDNS struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domain) || (has(self.initProvider) && has(self.initProvider.domain))",message="spec.forProvider.domain is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeName) || (has(self.initProvider) && has(self.initProvider.nodeName))",message="spec.forProvider.nodeName is a required parameter"
	Spec   EnvironmentDNSSpec   `json:"spec"`
	Status EnvironmentDNSStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentDNSList contains a list of EnvironmentDNSs
type EnvironmentDNSList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentDNS `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentDNS_Kind             = "EnvironmentDNS"
	EnvironmentDNS_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentDNS_Kind}.String()
	EnvironmentDNS_KindAPIVersion   = EnvironmentDNS_Kind + "." + CRDGroupVersion.String()
	EnvironmentDNS_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentDNS_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentDNS{}, &EnvironmentDNSList{})
}
