// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentPoolInitParameters struct {

	// The pool comment.
	// The pool comment
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// The pool identifier.
	// The pool id
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`
}

type EnvironmentPoolObservation struct {

	// The pool comment.
	// The pool comment
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// The member identifier.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The pool members.
	// The pool members
	Members []MembersObservation `json:"members,omitempty" tf:"members,omitempty"`

	// The pool identifier.
	// The pool id
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`
}

type EnvironmentPoolParameters struct {

	// The pool comment.
	// The pool comment
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// The pool identifier.
	// The pool id
	// +kubebuilder:validation:Optional
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`
}

type MembersInitParameters struct {
}

type MembersObservation struct {

	// The datastore identifier.
	DatastoreID *string `json:"datastoreId,omitempty" tf:"datastore_id,omitempty"`

	// The member identifier.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The node name.
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// The member type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The virtual machine identifier.
	VMID *float64 `json:"vmId,omitempty" tf:"vm_id,omitempty"`
}

type MembersParameters struct {
}

// EnvironmentPoolSpec defines the desired state of EnvironmentPool
type EnvironmentPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentPoolParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentPoolInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentPoolStatus defines the observed state of EnvironmentPool.
type EnvironmentPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentPool is the Schema for the EnvironmentPools API. |  Manages a resource pool.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmoxbpg}
type EnvironmentPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.poolId) || (has(self.initProvider) && has(self.initProvider.poolId))",message="spec.forProvider.poolId is a required parameter"
	Spec   EnvironmentPoolSpec   `json:"spec"`
	Status EnvironmentPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentPoolList contains a list of EnvironmentPools
type EnvironmentPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentPool `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentPool_Kind             = "EnvironmentPool"
	EnvironmentPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentPool_Kind}.String()
	EnvironmentPool_KindAPIVersion   = EnvironmentPool_Kind + "." + CRDGroupVersion.String()
	EnvironmentPool_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentPool_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentPool{}, &EnvironmentPoolList{})
}
