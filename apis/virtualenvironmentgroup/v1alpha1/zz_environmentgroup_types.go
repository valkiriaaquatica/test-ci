// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ACLInitParameters struct {

	// The path.
	// The path
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Whether to propagate to child paths.
	// Whether to propagate to child paths
	Propagate *bool `json:"propagate,omitempty" tf:"propagate,omitempty"`

	// The role identifier.
	// The role id
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

type ACLObservation struct {

	// The path.
	// The path
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Whether to propagate to child paths.
	// Whether to propagate to child paths
	Propagate *bool `json:"propagate,omitempty" tf:"propagate,omitempty"`

	// The role identifier.
	// The role id
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

type ACLParameters struct {

	// The path.
	// The path
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`

	// Whether to propagate to child paths.
	// Whether to propagate to child paths
	// +kubebuilder:validation:Optional
	Propagate *bool `json:"propagate,omitempty" tf:"propagate,omitempty"`

	// The role identifier.
	// The role id
	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId" tf:"role_id,omitempty"`
}

type EnvironmentGroupInitParameters struct {

	// The access control list (multiple blocks supported).
	// The access control list
	ACL []ACLInitParameters `json:"acl,omitempty" tf:"acl,omitempty"`

	// The group comment.
	// The group comment
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// The group identifier.
	// The group id
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`
}

type EnvironmentGroupObservation struct {

	// The access control list (multiple blocks supported).
	// The access control list
	ACL []ACLObservation `json:"acl,omitempty" tf:"acl,omitempty"`

	// The group comment.
	// The group comment
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// The group identifier.
	// The group id
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The group members as a list of username@realm entries
	// The group members
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`
}

type EnvironmentGroupParameters struct {

	// The access control list (multiple blocks supported).
	// The access control list
	// +kubebuilder:validation:Optional
	ACL []ACLParameters `json:"acl,omitempty" tf:"acl,omitempty"`

	// The group comment.
	// The group comment
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// The group identifier.
	// The group id
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`
}

// EnvironmentGroupSpec defines the desired state of EnvironmentGroup
type EnvironmentGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentGroupInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentGroupStatus defines the observed state of EnvironmentGroup.
type EnvironmentGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentGroup is the Schema for the EnvironmentGroups API. |  Manages a user group.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmoxbpg}
type EnvironmentGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupId) || (has(self.initProvider) && has(self.initProvider.groupId))",message="spec.forProvider.groupId is a required parameter"
	Spec   EnvironmentGroupSpec   `json:"spec"`
	Status EnvironmentGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentGroupList contains a list of EnvironmentGroups
type EnvironmentGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentGroup `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentGroup_Kind             = "EnvironmentGroup"
	EnvironmentGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentGroup_Kind}.String()
	EnvironmentGroup_KindAPIVersion   = EnvironmentGroup_Kind + "." + CRDGroupVersion.String()
	EnvironmentGroup_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentGroup{}, &EnvironmentGroupList{})
}
