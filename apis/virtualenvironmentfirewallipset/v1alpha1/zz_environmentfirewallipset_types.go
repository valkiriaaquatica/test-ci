// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CidrInitParameters struct {

	// IPSet comment.
	// IP/CIDR comment
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// IPSet name.
	// Network/IP specification in CIDR format
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Entries marked as nomatch are skipped as if those
	// were not added to the set.
	// No match this IP/CIDR
	Nomatch *bool `json:"nomatch,omitempty" tf:"nomatch,omitempty"`
}

type CidrObservation struct {

	// IPSet comment.
	// IP/CIDR comment
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// IPSet name.
	// Network/IP specification in CIDR format
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Entries marked as nomatch are skipped as if those
	// were not added to the set.
	// No match this IP/CIDR
	Nomatch *bool `json:"nomatch,omitempty" tf:"nomatch,omitempty"`
}

type CidrParameters struct {

	// IPSet comment.
	// IP/CIDR comment
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// IPSet name.
	// Network/IP specification in CIDR format
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Entries marked as nomatch are skipped as if those
	// were not added to the set.
	// No match this IP/CIDR
	// +kubebuilder:validation:Optional
	Nomatch *bool `json:"nomatch,omitempty" tf:"nomatch,omitempty"`
}

type EnvironmentFirewallIPSetInitParameters struct {

	// IP/CIDR block (multiple blocks supported).
	// List of IP or Networks
	Cidr []CidrInitParameters `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// IPSet comment.
	// IPSet comment
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Container ID. Leave empty for cluster level ipsets.
	// The ID of the container to manage the firewall for.
	ContainerID *float64 `json:"containerId,omitempty" tf:"container_id,omitempty"`

	// IPSet name.
	// IPSet name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Node name. Leave empty for cluster level ipsets.
	// The name of the node.
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// VM ID. Leave empty for cluster level ipsets.
	// The ID of the VM to manage the firewall for.
	VMID *float64 `json:"vmId,omitempty" tf:"vm_id,omitempty"`
}

type EnvironmentFirewallIPSetObservation struct {

	// IP/CIDR block (multiple blocks supported).
	// List of IP or Networks
	Cidr []CidrObservation `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// IPSet comment.
	// IPSet comment
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Container ID. Leave empty for cluster level ipsets.
	// The ID of the container to manage the firewall for.
	ContainerID *float64 `json:"containerId,omitempty" tf:"container_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IPSet name.
	// IPSet name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Node name. Leave empty for cluster level ipsets.
	// The name of the node.
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// VM ID. Leave empty for cluster level ipsets.
	// The ID of the VM to manage the firewall for.
	VMID *float64 `json:"vmId,omitempty" tf:"vm_id,omitempty"`
}

type EnvironmentFirewallIPSetParameters struct {

	// IP/CIDR block (multiple blocks supported).
	// List of IP or Networks
	// +kubebuilder:validation:Optional
	Cidr []CidrParameters `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// IPSet comment.
	// IPSet comment
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Container ID. Leave empty for cluster level ipsets.
	// The ID of the container to manage the firewall for.
	// +kubebuilder:validation:Optional
	ContainerID *float64 `json:"containerId,omitempty" tf:"container_id,omitempty"`

	// IPSet name.
	// IPSet name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Node name. Leave empty for cluster level ipsets.
	// The name of the node.
	// +kubebuilder:validation:Optional
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// VM ID. Leave empty for cluster level ipsets.
	// The ID of the VM to manage the firewall for.
	// +kubebuilder:validation:Optional
	VMID *float64 `json:"vmId,omitempty" tf:"vm_id,omitempty"`
}

// EnvironmentFirewallIPSetSpec defines the desired state of EnvironmentFirewallIPSet
type EnvironmentFirewallIPSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentFirewallIPSetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentFirewallIPSetInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentFirewallIPSetStatus defines the observed state of EnvironmentFirewallIPSet.
type EnvironmentFirewallIPSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentFirewallIPSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentFirewallIPSet is the Schema for the EnvironmentFirewallIPSets API. |  An IPSet allows us to group multiple IP addresses, IP subnets and aliases. Aliases can be created on the cluster level, on VM / Container level.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmoxbpg}
type EnvironmentFirewallIPSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   EnvironmentFirewallIPSetSpec   `json:"spec"`
	Status EnvironmentFirewallIPSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentFirewallIPSetList contains a list of EnvironmentFirewallIPSets
type EnvironmentFirewallIPSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentFirewallIPSet `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentFirewallIPSet_Kind             = "EnvironmentFirewallIPSet"
	EnvironmentFirewallIPSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentFirewallIPSet_Kind}.String()
	EnvironmentFirewallIPSet_KindAPIVersion   = EnvironmentFirewallIPSet_Kind + "." + CRDGroupVersion.String()
	EnvironmentFirewallIPSet_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentFirewallIPSet_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentFirewallIPSet{}, &EnvironmentFirewallIPSetList{})
}
