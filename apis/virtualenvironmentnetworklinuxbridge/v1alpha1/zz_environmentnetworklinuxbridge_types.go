// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentNetworkLinuxBridgeInitParameters struct {

	// (String) The interface IPv4/CIDR address.
	// The interface IPv4/CIDR address.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (String) The interface IPv6/CIDR address.
	// The interface IPv6/CIDR address.
	Address6 *string `json:"address6,omitempty" tf:"address6,omitempty"`

	// (Boolean) Automatically start interface on boot (defaults to true).
	// Automatically start interface on boot (defaults to `true`).
	Autostart *bool `json:"autostart,omitempty" tf:"autostart,omitempty"`

	// (String) Comment for the interface.
	// Comment for the interface.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Default gateway address.
	// Default gateway address.
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// (String) Default IPv6 gateway address.
	// Default IPv6 gateway address.
	Gateway6 *string `json:"gateway6,omitempty" tf:"gateway6,omitempty"`

	// (Number) The interface MTU.
	// The interface MTU.
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// vmbr4094), but can be any alphanumeric string that starts with a character and is at most 10 characters long.
	// The interface name. Commonly vmbr[N], where 0 ≤ N ≤ 4094 (vmbr0 - vmbr4094), but can be any alphanumeric string that starts with a character and is at most 10 characters long.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The name of the node.
	// The name of the node.
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// (List of String) The interface bridge ports.
	// The interface bridge ports.
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// (Boolean) Whether the interface bridge is VLAN aware (defaults to false).
	// Whether the interface bridge is VLAN aware (defaults to `false`).
	VlanAware *bool `json:"vlanAware,omitempty" tf:"vlan_aware,omitempty"`
}

type EnvironmentNetworkLinuxBridgeObservation struct {

	// (String) The interface IPv4/CIDR address.
	// The interface IPv4/CIDR address.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (String) The interface IPv6/CIDR address.
	// The interface IPv6/CIDR address.
	Address6 *string `json:"address6,omitempty" tf:"address6,omitempty"`

	// (Boolean) Automatically start interface on boot (defaults to true).
	// Automatically start interface on boot (defaults to `true`).
	Autostart *bool `json:"autostart,omitempty" tf:"autostart,omitempty"`

	// (String) Comment for the interface.
	// Comment for the interface.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Default gateway address.
	// Default gateway address.
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// (String) Default IPv6 gateway address.
	// Default IPv6 gateway address.
	Gateway6 *string `json:"gateway6,omitempty" tf:"gateway6,omitempty"`

	// (String) A unique identifier with format <node name>:<iface>
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) The interface MTU.
	// The interface MTU.
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// vmbr4094), but can be any alphanumeric string that starts with a character and is at most 10 characters long.
	// The interface name. Commonly vmbr[N], where 0 ≤ N ≤ 4094 (vmbr0 - vmbr4094), but can be any alphanumeric string that starts with a character and is at most 10 characters long.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The name of the node.
	// The name of the node.
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// (List of String) The interface bridge ports.
	// The interface bridge ports.
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// (Boolean) Whether the interface bridge is VLAN aware (defaults to false).
	// Whether the interface bridge is VLAN aware (defaults to `false`).
	VlanAware *bool `json:"vlanAware,omitempty" tf:"vlan_aware,omitempty"`
}

type EnvironmentNetworkLinuxBridgeParameters struct {

	// (String) The interface IPv4/CIDR address.
	// The interface IPv4/CIDR address.
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (String) The interface IPv6/CIDR address.
	// The interface IPv6/CIDR address.
	// +kubebuilder:validation:Optional
	Address6 *string `json:"address6,omitempty" tf:"address6,omitempty"`

	// (Boolean) Automatically start interface on boot (defaults to true).
	// Automatically start interface on boot (defaults to `true`).
	// +kubebuilder:validation:Optional
	Autostart *bool `json:"autostart,omitempty" tf:"autostart,omitempty"`

	// (String) Comment for the interface.
	// Comment for the interface.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Default gateway address.
	// Default gateway address.
	// +kubebuilder:validation:Optional
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// (String) Default IPv6 gateway address.
	// Default IPv6 gateway address.
	// +kubebuilder:validation:Optional
	Gateway6 *string `json:"gateway6,omitempty" tf:"gateway6,omitempty"`

	// (Number) The interface MTU.
	// The interface MTU.
	// +kubebuilder:validation:Optional
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// vmbr4094), but can be any alphanumeric string that starts with a character and is at most 10 characters long.
	// The interface name. Commonly vmbr[N], where 0 ≤ N ≤ 4094 (vmbr0 - vmbr4094), but can be any alphanumeric string that starts with a character and is at most 10 characters long.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The name of the node.
	// The name of the node.
	// +kubebuilder:validation:Optional
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// (List of String) The interface bridge ports.
	// The interface bridge ports.
	// +kubebuilder:validation:Optional
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// (Boolean) Whether the interface bridge is VLAN aware (defaults to false).
	// Whether the interface bridge is VLAN aware (defaults to `false`).
	// +kubebuilder:validation:Optional
	VlanAware *bool `json:"vlanAware,omitempty" tf:"vlan_aware,omitempty"`
}

// EnvironmentNetworkLinuxBridgeSpec defines the desired state of EnvironmentNetworkLinuxBridge
type EnvironmentNetworkLinuxBridgeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentNetworkLinuxBridgeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentNetworkLinuxBridgeInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentNetworkLinuxBridgeStatus defines the observed state of EnvironmentNetworkLinuxBridge.
type EnvironmentNetworkLinuxBridgeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentNetworkLinuxBridgeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentNetworkLinuxBridge is the Schema for the EnvironmentNetworkLinuxBridges API. Manages a Linux Bridge network interface in a Proxmox VE node.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmoxbpg}
type EnvironmentNetworkLinuxBridge struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeName) || (has(self.initProvider) && has(self.initProvider.nodeName))",message="spec.forProvider.nodeName is a required parameter"
	Spec   EnvironmentNetworkLinuxBridgeSpec   `json:"spec"`
	Status EnvironmentNetworkLinuxBridgeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentNetworkLinuxBridgeList contains a list of EnvironmentNetworkLinuxBridges
type EnvironmentNetworkLinuxBridgeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentNetworkLinuxBridge `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentNetworkLinuxBridge_Kind             = "EnvironmentNetworkLinuxBridge"
	EnvironmentNetworkLinuxBridge_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentNetworkLinuxBridge_Kind}.String()
	EnvironmentNetworkLinuxBridge_KindAPIVersion   = EnvironmentNetworkLinuxBridge_Kind + "." + CRDGroupVersion.String()
	EnvironmentNetworkLinuxBridge_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentNetworkLinuxBridge_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentNetworkLinuxBridge{}, &EnvironmentNetworkLinuxBridgeList{})
}
