// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentTimeInitParameters struct {

	// A node name.
	// The node name
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// The node's time zone.
	// The time zone
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type EnvironmentTimeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The node's local time.
	// The local timestamp
	LocalTime *string `json:"localTime,omitempty" tf:"local_time,omitempty"`

	// A node name.
	// The node name
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// The node's time zone.
	// The time zone
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// The node's local time formatted as UTC.
	// The UTC timestamp
	UtcTime *string `json:"utcTime,omitempty" tf:"utc_time,omitempty"`
}

type EnvironmentTimeParameters struct {

	// A node name.
	// The node name
	// +kubebuilder:validation:Optional
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// The node's time zone.
	// The time zone
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

// EnvironmentTimeSpec defines the desired state of EnvironmentTime
type EnvironmentTimeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentTimeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentTimeInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentTimeStatus defines the observed state of EnvironmentTime.
type EnvironmentTimeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentTimeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentTime is the Schema for the EnvironmentTimes API. |  Manages the time for a specific node.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmoxbpg}
type EnvironmentTime struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeName) || (has(self.initProvider) && has(self.initProvider.nodeName))",message="spec.forProvider.nodeName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.timeZone) || (has(self.initProvider) && has(self.initProvider.timeZone))",message="spec.forProvider.timeZone is a required parameter"
	Spec   EnvironmentTimeSpec   `json:"spec"`
	Status EnvironmentTimeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentTimeList contains a list of EnvironmentTimes
type EnvironmentTimeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentTime `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentTime_Kind             = "EnvironmentTime"
	EnvironmentTime_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentTime_Kind}.String()
	EnvironmentTime_KindAPIVersion   = EnvironmentTime_Kind + "." + CRDGroupVersion.String()
	EnvironmentTime_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentTime_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentTime{}, &EnvironmentTimeList{})
}
