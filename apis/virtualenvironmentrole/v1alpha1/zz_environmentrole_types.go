// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentRoleInitParameters struct {

	// The role privileges.
	// The role privileges
	// +listType=set
	Privileges []*string `json:"privileges,omitempty" tf:"privileges,omitempty"`

	// The role identifier.
	// The role id
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

type EnvironmentRoleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The role privileges.
	// The role privileges
	// +listType=set
	Privileges []*string `json:"privileges,omitempty" tf:"privileges,omitempty"`

	// The role identifier.
	// The role id
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

type EnvironmentRoleParameters struct {

	// The role privileges.
	// The role privileges
	// +kubebuilder:validation:Optional
	// +listType=set
	Privileges []*string `json:"privileges,omitempty" tf:"privileges,omitempty"`

	// The role identifier.
	// The role id
	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

// EnvironmentRoleSpec defines the desired state of EnvironmentRole
type EnvironmentRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentRoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentRoleInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentRoleStatus defines the observed state of EnvironmentRole.
type EnvironmentRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentRole is the Schema for the EnvironmentRoles API. |  Manages a role.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmoxbpg}
type EnvironmentRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.privileges) || (has(self.initProvider) && has(self.initProvider.privileges))",message="spec.forProvider.privileges is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roleId) || (has(self.initProvider) && has(self.initProvider.roleId))",message="spec.forProvider.roleId is a required parameter"
	Spec   EnvironmentRoleSpec   `json:"spec"`
	Status EnvironmentRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentRoleList contains a list of EnvironmentRoles
type EnvironmentRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentRole `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentRole_Kind             = "EnvironmentRole"
	EnvironmentRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentRole_Kind}.String()
	EnvironmentRole_KindAPIVersion   = EnvironmentRole_Kind + "." + CRDGroupVersion.String()
	EnvironmentRole_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentRole_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentRole{}, &EnvironmentRoleList{})
}
