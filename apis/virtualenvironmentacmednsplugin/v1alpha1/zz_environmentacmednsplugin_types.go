// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentAcmeDNSPluginInitParameters struct {

	// (String) API plugin name.
	// API plugin name.
	API *string `json:"api,omitempty" tf:"api,omitempty"`

	// (Map of String) DNS plugin data.
	// DNS plugin data.
	// +mapType=granular
	Data map[string]*string `json:"data,omitempty" tf:"data,omitempty"`

	// (String) SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
	// SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
	Digest *string `json:"digest,omitempty" tf:"digest,omitempty"`

	// (Boolean) Flag to disable the config.
	// Flag to disable the config.
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// (String) ACME Plugin ID name.
	// ACME Plugin ID name.
	Plugin *string `json:"plugin,omitempty" tf:"plugin,omitempty"`

	// 172800).
	// Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
	ValidationDelay *float64 `json:"validationDelay,omitempty" tf:"validation_delay,omitempty"`
}

type EnvironmentAcmeDNSPluginObservation struct {

	// (String) API plugin name.
	// API plugin name.
	API *string `json:"api,omitempty" tf:"api,omitempty"`

	// (Map of String) DNS plugin data.
	// DNS plugin data.
	// +mapType=granular
	Data map[string]*string `json:"data,omitempty" tf:"data,omitempty"`

	// (String) SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
	// SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
	Digest *string `json:"digest,omitempty" tf:"digest,omitempty"`

	// (Boolean) Flag to disable the config.
	// Flag to disable the config.
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) ACME Plugin ID name.
	// ACME Plugin ID name.
	Plugin *string `json:"plugin,omitempty" tf:"plugin,omitempty"`

	// 172800).
	// Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
	ValidationDelay *float64 `json:"validationDelay,omitempty" tf:"validation_delay,omitempty"`
}

type EnvironmentAcmeDNSPluginParameters struct {

	// (String) API plugin name.
	// API plugin name.
	// +kubebuilder:validation:Optional
	API *string `json:"api,omitempty" tf:"api,omitempty"`

	// (Map of String) DNS plugin data.
	// DNS plugin data.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Data map[string]*string `json:"data,omitempty" tf:"data,omitempty"`

	// (String) SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
	// SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
	// +kubebuilder:validation:Optional
	Digest *string `json:"digest,omitempty" tf:"digest,omitempty"`

	// (Boolean) Flag to disable the config.
	// Flag to disable the config.
	// +kubebuilder:validation:Optional
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// (String) ACME Plugin ID name.
	// ACME Plugin ID name.
	// +kubebuilder:validation:Optional
	Plugin *string `json:"plugin,omitempty" tf:"plugin,omitempty"`

	// 172800).
	// Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
	// +kubebuilder:validation:Optional
	ValidationDelay *float64 `json:"validationDelay,omitempty" tf:"validation_delay,omitempty"`
}

// EnvironmentAcmeDNSPluginSpec defines the desired state of EnvironmentAcmeDNSPlugin
type EnvironmentAcmeDNSPluginSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentAcmeDNSPluginParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentAcmeDNSPluginInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentAcmeDNSPluginStatus defines the observed state of EnvironmentAcmeDNSPlugin.
type EnvironmentAcmeDNSPluginStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentAcmeDNSPluginObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentAcmeDNSPlugin is the Schema for the EnvironmentAcmeDNSPlugins API. Manages an ACME plugin in a Proxmox VE cluster.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmoxbpg}
type EnvironmentAcmeDNSPlugin struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.api) || (has(self.initProvider) && has(self.initProvider.api))",message="spec.forProvider.api is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.plugin) || (has(self.initProvider) && has(self.initProvider.plugin))",message="spec.forProvider.plugin is a required parameter"
	Spec   EnvironmentAcmeDNSPluginSpec   `json:"spec"`
	Status EnvironmentAcmeDNSPluginStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentAcmeDNSPluginList contains a list of EnvironmentAcmeDNSPlugins
type EnvironmentAcmeDNSPluginList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentAcmeDNSPlugin `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentAcmeDNSPlugin_Kind             = "EnvironmentAcmeDNSPlugin"
	EnvironmentAcmeDNSPlugin_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentAcmeDNSPlugin_Kind}.String()
	EnvironmentAcmeDNSPlugin_KindAPIVersion   = EnvironmentAcmeDNSPlugin_Kind + "." + CRDGroupVersion.String()
	EnvironmentAcmeDNSPlugin_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentAcmeDNSPlugin_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentAcmeDNSPlugin{}, &EnvironmentAcmeDNSPluginList{})
}
