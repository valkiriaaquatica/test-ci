// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentNetworkLinuxVlanInitParameters struct {

	// (String) The interface IPv4/CIDR address.
	// The interface IPv4/CIDR address.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (String) The interface IPv6/CIDR address.
	// The interface IPv6/CIDR address.
	Address6 *string `json:"address6,omitempty" tf:"address6,omitempty"`

	// (Boolean) Automatically start interface on boot (defaults to true).
	// Automatically start interface on boot (defaults to `true`).
	Autostart *bool `json:"autostart,omitempty" tf:"autostart,omitempty"`

	// (String) Comment for the interface.
	// Comment for the interface.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Default gateway address.
	// Default gateway address.
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// (String) Default IPv6 gateway address.
	// Default IPv6 gateway address.
	Gateway6 *string `json:"gateway6,omitempty" tf:"gateway6,omitempty"`

	// (String) The VLAN raw device. See also name.
	// The VLAN raw device. See also `name`.
	Interface *string `json:"interface,omitempty" tf:"interface,omitempty"`

	// (Number) The interface MTU.
	// The interface MTU.
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// (String) The interface name. Either add the VLAN tag number to an existing interface name, e.g. ens18.21 (and do not set interface and vlan), or use custom name, e.g. vlan_lab (interface and vlan are then required).
	// The interface name. Either add the VLAN tag number to an existing interface name, e.g. `ens18.21` (and do not set `interface` and `vlan`), or use custom name, e.g. `vlan_lab` (`interface` and `vlan` are then required).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The name of the node.
	// The name of the node.
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// (Number) The VLAN tag. See also name.
	// The VLAN tag. See also `name`.
	Vlan *float64 `json:"vlan,omitempty" tf:"vlan,omitempty"`
}

type EnvironmentNetworkLinuxVlanObservation struct {

	// (String) The interface IPv4/CIDR address.
	// The interface IPv4/CIDR address.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (String) The interface IPv6/CIDR address.
	// The interface IPv6/CIDR address.
	Address6 *string `json:"address6,omitempty" tf:"address6,omitempty"`

	// (Boolean) Automatically start interface on boot (defaults to true).
	// Automatically start interface on boot (defaults to `true`).
	Autostart *bool `json:"autostart,omitempty" tf:"autostart,omitempty"`

	// (String) Comment for the interface.
	// Comment for the interface.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Default gateway address.
	// Default gateway address.
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// (String) Default IPv6 gateway address.
	// Default IPv6 gateway address.
	Gateway6 *string `json:"gateway6,omitempty" tf:"gateway6,omitempty"`

	// (String) A unique identifier with format <node name>:<iface>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The VLAN raw device. See also name.
	// The VLAN raw device. See also `name`.
	Interface *string `json:"interface,omitempty" tf:"interface,omitempty"`

	// (Number) The interface MTU.
	// The interface MTU.
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// (String) The interface name. Either add the VLAN tag number to an existing interface name, e.g. ens18.21 (and do not set interface and vlan), or use custom name, e.g. vlan_lab (interface and vlan are then required).
	// The interface name. Either add the VLAN tag number to an existing interface name, e.g. `ens18.21` (and do not set `interface` and `vlan`), or use custom name, e.g. `vlan_lab` (`interface` and `vlan` are then required).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The name of the node.
	// The name of the node.
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// (Number) The VLAN tag. See also name.
	// The VLAN tag. See also `name`.
	Vlan *float64 `json:"vlan,omitempty" tf:"vlan,omitempty"`
}

type EnvironmentNetworkLinuxVlanParameters struct {

	// (String) The interface IPv4/CIDR address.
	// The interface IPv4/CIDR address.
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (String) The interface IPv6/CIDR address.
	// The interface IPv6/CIDR address.
	// +kubebuilder:validation:Optional
	Address6 *string `json:"address6,omitempty" tf:"address6,omitempty"`

	// (Boolean) Automatically start interface on boot (defaults to true).
	// Automatically start interface on boot (defaults to `true`).
	// +kubebuilder:validation:Optional
	Autostart *bool `json:"autostart,omitempty" tf:"autostart,omitempty"`

	// (String) Comment for the interface.
	// Comment for the interface.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Default gateway address.
	// Default gateway address.
	// +kubebuilder:validation:Optional
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// (String) Default IPv6 gateway address.
	// Default IPv6 gateway address.
	// +kubebuilder:validation:Optional
	Gateway6 *string `json:"gateway6,omitempty" tf:"gateway6,omitempty"`

	// (String) The VLAN raw device. See also name.
	// The VLAN raw device. See also `name`.
	// +kubebuilder:validation:Optional
	Interface *string `json:"interface,omitempty" tf:"interface,omitempty"`

	// (Number) The interface MTU.
	// The interface MTU.
	// +kubebuilder:validation:Optional
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// (String) The interface name. Either add the VLAN tag number to an existing interface name, e.g. ens18.21 (and do not set interface and vlan), or use custom name, e.g. vlan_lab (interface and vlan are then required).
	// The interface name. Either add the VLAN tag number to an existing interface name, e.g. `ens18.21` (and do not set `interface` and `vlan`), or use custom name, e.g. `vlan_lab` (`interface` and `vlan` are then required).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The name of the node.
	// The name of the node.
	// +kubebuilder:validation:Optional
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// (Number) The VLAN tag. See also name.
	// The VLAN tag. See also `name`.
	// +kubebuilder:validation:Optional
	Vlan *float64 `json:"vlan,omitempty" tf:"vlan,omitempty"`
}

// EnvironmentNetworkLinuxVlanSpec defines the desired state of EnvironmentNetworkLinuxVlan
type EnvironmentNetworkLinuxVlanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentNetworkLinuxVlanParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentNetworkLinuxVlanInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentNetworkLinuxVlanStatus defines the observed state of EnvironmentNetworkLinuxVlan.
type EnvironmentNetworkLinuxVlanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentNetworkLinuxVlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentNetworkLinuxVlan is the Schema for the EnvironmentNetworkLinuxVlans API. Manages a Linux VLAN network interface in a Proxmox VE node.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmoxbpg}
type EnvironmentNetworkLinuxVlan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeName) || (has(self.initProvider) && has(self.initProvider.nodeName))",message="spec.forProvider.nodeName is a required parameter"
	Spec   EnvironmentNetworkLinuxVlanSpec   `json:"spec"`
	Status EnvironmentNetworkLinuxVlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentNetworkLinuxVlanList contains a list of EnvironmentNetworkLinuxVlans
type EnvironmentNetworkLinuxVlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentNetworkLinuxVlan `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentNetworkLinuxVlan_Kind             = "EnvironmentNetworkLinuxVlan"
	EnvironmentNetworkLinuxVlan_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentNetworkLinuxVlan_Kind}.String()
	EnvironmentNetworkLinuxVlan_KindAPIVersion   = EnvironmentNetworkLinuxVlan_Kind + "." + CRDGroupVersion.String()
	EnvironmentNetworkLinuxVlan_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentNetworkLinuxVlan_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentNetworkLinuxVlan{}, &EnvironmentNetworkLinuxVlanList{})
}
