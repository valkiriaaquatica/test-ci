// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentFirewallAliasInitParameters struct {

	// Network/IP specification in CIDR format.
	// IP/CIDR block
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Alias comment.
	// Alias comment
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Container ID. Leave empty for cluster level aliases.
	// The ID of the container to manage the firewall for.
	ContainerID *float64 `json:"containerId,omitempty" tf:"container_id,omitempty"`

	// Alias name.
	// Alias name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Node name. Leave empty for cluster level aliases.
	// The name of the node.
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// VM ID. Leave empty for cluster level aliases.
	// The ID of the VM to manage the firewall for.
	VMID *float64 `json:"vmId,omitempty" tf:"vm_id,omitempty"`
}

type EnvironmentFirewallAliasObservation struct {

	// Network/IP specification in CIDR format.
	// IP/CIDR block
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Alias comment.
	// Alias comment
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Container ID. Leave empty for cluster level aliases.
	// The ID of the container to manage the firewall for.
	ContainerID *float64 `json:"containerId,omitempty" tf:"container_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Alias name.
	// Alias name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Node name. Leave empty for cluster level aliases.
	// The name of the node.
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// VM ID. Leave empty for cluster level aliases.
	// The ID of the VM to manage the firewall for.
	VMID *float64 `json:"vmId,omitempty" tf:"vm_id,omitempty"`
}

type EnvironmentFirewallAliasParameters struct {

	// Network/IP specification in CIDR format.
	// IP/CIDR block
	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Alias comment.
	// Alias comment
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Container ID. Leave empty for cluster level aliases.
	// The ID of the container to manage the firewall for.
	// +kubebuilder:validation:Optional
	ContainerID *float64 `json:"containerId,omitempty" tf:"container_id,omitempty"`

	// Alias name.
	// Alias name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Node name. Leave empty for cluster level aliases.
	// The name of the node.
	// +kubebuilder:validation:Optional
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// VM ID. Leave empty for cluster level aliases.
	// The ID of the VM to manage the firewall for.
	// +kubebuilder:validation:Optional
	VMID *float64 `json:"vmId,omitempty" tf:"vm_id,omitempty"`
}

// EnvironmentFirewallAliasSpec defines the desired state of EnvironmentFirewallAlias
type EnvironmentFirewallAliasSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentFirewallAliasParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentFirewallAliasInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentFirewallAliasStatus defines the observed state of EnvironmentFirewallAlias.
type EnvironmentFirewallAliasStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentFirewallAliasObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentFirewallAlias is the Schema for the EnvironmentFirewallAliass API. |  Aliases are used to see what devices or group of devices are affected by a rule. We can create aliases to identify an IP address or a network. Aliases can be created on the cluster level, on VM / Container level.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmoxbpg}
type EnvironmentFirewallAlias struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cidr) || (has(self.initProvider) && has(self.initProvider.cidr))",message="spec.forProvider.cidr is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   EnvironmentFirewallAliasSpec   `json:"spec"`
	Status EnvironmentFirewallAliasStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentFirewallAliasList contains a list of EnvironmentFirewallAliass
type EnvironmentFirewallAliasList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentFirewallAlias `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentFirewallAlias_Kind             = "EnvironmentFirewallAlias"
	EnvironmentFirewallAlias_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentFirewallAlias_Kind}.String()
	EnvironmentFirewallAlias_KindAPIVersion   = EnvironmentFirewallAlias_Kind + "." + CRDGroupVersion.String()
	EnvironmentFirewallAlias_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentFirewallAlias_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentFirewallAlias{}, &EnvironmentFirewallAliasList{})
}
